/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from types-v8/global.d.ts:
/** @type {!NodeJS.ConsoleConstructor} */
Console.prototype.Console;

/**
 * @param {?} value
 * @param {string=} message
 * @param {...?} optionalParams
 * @return {void}
 */
Console.prototype.assert = function(value, message, optionalParams) {};

/**
 * @return {void}
 */
Console.prototype.clear = function() {};

/**
 * @param {string=} label
 * @return {void}
 */
Console.prototype.count = function(label) {};

/**
 * @param {string=} label
 * @return {void}
 */
Console.prototype.countReset = function(label) {};

/**
 * @param {?=} message
 * @param {...?} optionalParams
 * @return {void}
 */
Console.prototype.debug = function(message, optionalParams) {};

/**
 * @param {?} obj
 * @param {!NodeJS.InspectOptions=} options
 * @return {void}
 */
Console.prototype.dir = function(obj, options) {};

/**
 * @param {?=} message
 * @param {...?} optionalParams
 * @return {void}
 */
Console.prototype.error = function(message, optionalParams) {};

/**
 * @param {...?} label
 * @return {void}
 */
Console.prototype.group = function(label) {};

/**
 * @return {void}
 */
Console.prototype.groupCollapsed = function() {};

/**
 * @return {void}
 */
Console.prototype.groupEnd = function() {};

/**
 * @param {?=} message
 * @param {...?} optionalParams
 * @return {void}
 */
Console.prototype.info = function(message, optionalParams) {};

/**
 * @param {?=} message
 * @param {...?} optionalParams
 * @return {void}
 */
Console.prototype.log = function(message, optionalParams) {};

/**
 * @param {string} label
 * @return {void}
 */
Console.prototype.time = function(label) {};

/**
 * @param {string} label
 * @return {void}
 */
Console.prototype.timeEnd = function(label) {};

/**
 * @param {?=} message
 * @param {...?} optionalParams
 * @return {void}
 */
Console.prototype.trace = function(message, optionalParams) {};

/**
 * @param {?=} message
 * @param {...?} optionalParams
 * @return {void}
 */
Console.prototype.warn = function(message, optionalParams) {};

/**
 * @deprecated Use console.timeStamp() instead.
 * @param {string=} label
 * @return {void}
 */
Console.prototype.markTimeline = function(label) {};

/**
 * @param {string=} label
 * @return {void}
 */
Console.prototype.profile = function(label) {};

/**
 * @param {string=} label
 * @return {void}
 */
Console.prototype.profileEnd = function(label) {};

/**
 * @param {string=} label
 * @return {void}
 */
Console.prototype.timeStamp = function(label) {};

/**
 * @deprecated Use console.time() instead.
 * @param {string=} label
 * @return {void}
 */
Console.prototype.timeline = function(label) {};

/**
 * @deprecated Use console.timeEnd() instead.
 * @param {string=} label
 * @return {void}
 */
Console.prototype.timelineEnd = function(label) {};
/** @type {string} */
Error.prototype.stack;

/**
 * Removes whitespace from the left end of a string.
 * @return {string}
 */
String.prototype.trimLeft = function() {};

/**
 * Removes whitespace from the right end of a string.
 * @return {string}
 */
String.prototype.trimRight = function() {};
/** @type {!NodeJS.Process} */
var process;
/** @type {!Console} */
var console;
/** @type {string} */
var __filename;
/** @type {string} */
var __dirname;

/**
 * @template T
 * @param {number} ms
 * @param {T=} value
 * @return {!Promise<void>|!Promise<T>}
 */
setTimeout.__promisify__ = function(ms, value) {};

/**
 * @param {function(...?): void} callback
 * @param {...?} args
 * @return {?}
 */
function setImmediate(callback, args) {}

/**
 * @template T
 * @param {T=} value
 * @return {!Promise<void>|!Promise<T>}
 */
setImmediate.__promisify__ = function(value) {};

/**
 * @param {?} immediateId
 * @return {void}
 */
function clearImmediate(immediateId) {}
/** @type {function(new: (!Buffer), string, string=): ?} */
var SlowBuffer;
/**
 * @record
 * @struct
 */
function MapConstructor() {}
/**
 * @record
 * @struct
 */
function WeakMapConstructor() {}
/**
 * @record
 * @struct
 */
function SetConstructor() {}
/**
 * @record
 * @struct
 */
function WeakSetConstructor() {}
/**
 * @template T
 * @record
 * @struct
 */
function Iterable() {}
/**
 * @template T
 * @record
 * @struct
 */
function Iterator() {}

/**
 * @param {?=} value
 * @return {!IteratorResult<T>}
 */
Iterator.prototype.next = function(value) {};
/**
 * @template T
 * @record
 * @struct
 */
function IteratorResult() {}
/**
 * @record
 * @struct
 */
function SymbolConstructor() {}
/** @type {symbol} */
SymbolConstructor.prototype.iterator;
/**
 * @template T
 * @record
 * @struct
 */
function IterableIterator() {}
/**
 * @record
 * @struct
 */
function NodeRequireFunction() {}

/* TODO: CallSignature:  */
/**
 * @extends {NodeRequireFunction}
 * @record
 * @struct
 */
function NodeRequire() {}
/** @type {!RequireResolve} */
NodeRequire.prototype.resolve;
/** @type {?} */
NodeRequire.prototype.cache;
/** @type {!NodeExtensions} */
NodeRequire.prototype.extensions;
/** @type {!NodeModule} */
NodeRequire.prototype.main;
/**
 * @record
 * @struct
 */
function RequireResolve() {}

/* TODO: CallSignature:  */

/**
 * @param {string} request
 * @return {!Array<string>}
 */
RequireResolve.prototype.paths = function(request) {};
/**
 * @record
 * @struct
 */
function NodeExtensions() {}

/* TODO: PropertySignature: '.js' */

/* TODO: PropertySignature: '.json' */

/* TODO: PropertySignature: '.node' */

/* TODO: IndexSignature:  */
/** @type {!NodeRequire} */
var require;
/**
 * @record
 * @struct
 */
function NodeModule() {}
/** @type {?} */
NodeModule.prototype.exports;
/** @type {!NodeRequireFunction} */
NodeModule.prototype.require;
/** @type {string} */
NodeModule.prototype.id;
/** @type {string} */
NodeModule.prototype.filename;
/** @type {boolean} */
NodeModule.prototype.loaded;
/** @type {!NodeModule} */
NodeModule.prototype.parent;
/** @type {!Array<!NodeModule>} */
NodeModule.prototype.children;
/** @type {!Array<string>} */
NodeModule.prototype.paths;
/** @type {!NodeRequire} */
var require;
/** @type {?} */
NodeModule.prototype.exports;
/** @type {!NodeRequireFunction} */
NodeModule.prototype.require;
/** @type {string} */
NodeModule.prototype.id;
/** @type {string} */
NodeModule.prototype.filename;
/** @type {boolean} */
NodeModule.prototype.loaded;
/** @type {!NodeModule} */
NodeModule.prototype.parent;
/** @type {!Array<!NodeModule>} */
NodeModule.prototype.children;
/** @type {!Array<string>} */
NodeModule.prototype.paths;

/** @typedef {string} */
var BufferEncoding;