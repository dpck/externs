/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from types-v8/cluster.d.ts:
// Derived from: declare module "cluster"
/** @const */
var cluster = {};
/**
 * @record
 * @struct
 */
cluster.ClusterSettings = function() {};
/** @type {!Array<string>} */
cluster.ClusterSettings.prototype.execArgv;
/** @type {string} */
cluster.ClusterSettings.prototype.exec;
/** @type {!Array<string>} */
cluster.ClusterSettings.prototype.args;
/** @type {boolean} */
cluster.ClusterSettings.prototype.silent;
/** @type {!Array<?>} */
cluster.ClusterSettings.prototype.stdio;
/** @type {number} */
cluster.ClusterSettings.prototype.uid;
/** @type {number} */
cluster.ClusterSettings.prototype.gid;
/** @type {(number|function(): number)} */
cluster.ClusterSettings.prototype.inspectPort;
/**
 * @record
 * @struct
 */
cluster.Address = function() {};
/** @type {string} */
cluster.Address.prototype.address;
/** @type {number} */
cluster.Address.prototype.port;
/** @type {(number|string)} */
cluster.Address.prototype.addressType;
/**
 * @extends {events.EventEmitter}
 * @constructor
 * @struct
 */
cluster.Worker = function() {};
/** @type {number} */
cluster.Worker.prototype.id;
/** @type {!child_process.ChildProcess} */
cluster.Worker.prototype.process;
/** @type {boolean} */
cluster.Worker.prototype.suicide;
/** @type {boolean} */
cluster.Worker.prototype.exitedAfterDisconnect;

/**
 * @param {?} message
 * @param {?=} sendHandle
 * @param {function(!Error): void=} callback
 * @return {boolean}
 */
cluster.Worker.prototype.send = function(message, sendHandle, callback) {};

/**
 * @param {string=} signal
 * @return {void}
 */
cluster.Worker.prototype.kill = function(signal) {};

/**
 * @param {string=} signal
 * @return {void}
 */
cluster.Worker.prototype.destroy = function(signal) {};

/**
 * @return {void}
 */
cluster.Worker.prototype.disconnect = function() {};

/**
 * @return {boolean}
 */
cluster.Worker.prototype.isConnected = function() {};

/**
 * @return {boolean}
 */
cluster.Worker.prototype.isDead = function() {};

/**
 * events.EventEmitter
 *   1. disconnect
 *   2. error
 *   3. exit
 *   4. listening
 *   5. message
 *   6. online
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(): void|function(!Error): void|function(number, string): void|function(!cluster.Address): void|function(?, (!net.Socket|!net.Server)): void} listener
 * @return {THIS}
 */
cluster.Worker.prototype.addListener = function(event, listener) {};

/**
 * @param {(string|symbol)|string} event
 * @param {...?|!Error|number|!cluster.Address} args_or_error_or_code_or_address_or_message
 * @return {boolean}
 */
cluster.Worker.prototype.emit = function(event, args_or_error_or_code_or_address_or_message) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(): void|function(!Error): void|function(number, string): void|function(!cluster.Address): void|function(?, (!net.Socket|!net.Server)): void} listener
 * @return {THIS}
 */
cluster.Worker.prototype.on = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(): void|function(!Error): void|function(number, string): void|function(!cluster.Address): void|function(?, (!net.Socket|!net.Server)): void} listener
 * @return {THIS}
 */
cluster.Worker.prototype.once = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(): void|function(!Error): void|function(number, string): void|function(!cluster.Address): void|function(?, (!net.Socket|!net.Server)): void} listener
 * @return {THIS}
 */
cluster.Worker.prototype.prependListener = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(): void|function(!Error): void|function(number, string): void|function(!cluster.Address): void|function(?, (!net.Socket|!net.Server)): void} listener
 * @return {THIS}
 */
cluster.Worker.prototype.prependOnceListener = function(event, listener) {};
/**
 * @extends {events.EventEmitter}
 * @record
 * @struct
 */
cluster.Cluster = function() {};
/** @type {!cluster.Worker} */
cluster.Cluster.prototype.Worker;
/** @type {boolean} */
cluster.Cluster.prototype.isMaster;
/** @type {boolean} */
cluster.Cluster.prototype.isWorker;
/** @type {!cluster.ClusterSettings} */
cluster.Cluster.prototype.settings;
/** @type {!cluster.Worker} */
cluster.Cluster.prototype.worker;
/** @type {!Object<string,!cluster.Worker>} */
cluster.Cluster.prototype.workers;

/**
 * @param {!Function=} callback
 * @return {void}
 */
cluster.Cluster.prototype.disconnect = function(callback) {};

/**
 * @param {?=} env
 * @return {!cluster.Worker}
 */
cluster.Cluster.prototype.fork = function(env) {};

/**
 * @param {!cluster.ClusterSettings=} settings
 * @return {void}
 */
cluster.Cluster.prototype.setupMaster = function(settings) {};

/**
 * events.EventEmitter
 *   1. disconnect
 *   2. exit
 *   3. fork
 *   4. listening
 *   5. message
 *   6. online
 *   7. setup
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(!cluster.Worker): void|function(!cluster.Worker, number, string): void|function(!cluster.Worker, !cluster.Address): void|function(!cluster.Worker, ?, (!net.Socket|!net.Server)): void|function(?): void} listener
 * @return {THIS}
 */
cluster.Cluster.prototype.addListener = function(event, listener) {};

/**
 * @param {(string|symbol)|string} event
 * @param {...?|!cluster.Worker} args_or_worker_or_settings
 * @return {boolean}
 */
cluster.Cluster.prototype.emit = function(event, args_or_worker_or_settings) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(!cluster.Worker): void|function(!cluster.Worker, number, string): void|function(!cluster.Worker, !cluster.Address): void|function(!cluster.Worker, ?, (!net.Socket|!net.Server)): void|function(?): void} listener
 * @return {THIS}
 */
cluster.Cluster.prototype.on = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(!cluster.Worker): void|function(!cluster.Worker, number, string): void|function(!cluster.Worker, !cluster.Address): void|function(!cluster.Worker, ?, (!net.Socket|!net.Server)): void|function(?): void} listener
 * @return {THIS}
 */
cluster.Cluster.prototype.once = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(!cluster.Worker): void|function(!cluster.Worker, number, string): void|function(!cluster.Worker, !cluster.Address): void|function(!cluster.Worker, ?, (!net.Socket|!net.Server)): void|function(?): void} listener
 * @return {THIS}
 */
cluster.Cluster.prototype.prependListener = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(!cluster.Worker): void|function(!cluster.Worker, number, string): void|function(!cluster.Worker, !cluster.Address): void|function(!cluster.Worker, ?, (!net.Socket|!net.Server)): void|function(?): void} listener
 * @return {THIS}
 */
cluster.Cluster.prototype.prependOnceListener = function(event, listener) {};

/**
 * @param {!Function=} callback
 * @return {void}
 */
cluster.disconnect = function(callback) {};

/**
 * @param {?=} env
 * @return {!cluster.Worker}
 */
cluster.fork = function(env) {};
/** @type {boolean} */
cluster.isMaster;
/** @type {boolean} */
cluster.isWorker;
/** @type {!cluster.ClusterSettings} */
cluster.settings;

/**
 * @param {!cluster.ClusterSettings=} settings
 * @return {void}
 */
cluster.setupMaster = function(settings) {};
/** @type {!cluster.Worker} */
cluster.worker;
/** @type {!Object<string,!cluster.Worker>} */
cluster.workers;

/**
 * events.EventEmitter
 *   1. disconnect
 *   2. exit
 *   3. fork
 *   4. listening
 *   5. message
 *   6. online
 *   7. setup
 * @param {string} event
 * @param {function(...?): void|function(!cluster.Worker): void|function(!cluster.Worker, number, string): void|function(!cluster.Worker, !cluster.Address): void|function(!cluster.Worker, ?, (!net.Socket|!net.Server)): void|function(?): void} listener
 * @return {!cluster.Cluster}
 */
cluster.addListener = function(event, listener) {};

/**
 * @param {(string|symbol)|string} event
 * @param {...?|!cluster.Worker} args_or_worker_or_settings
 * @return {boolean}
 */
cluster.emit = function(event, args_or_worker_or_settings) {};

/**
 * @param {string} event
 * @param {function(...?): void|function(!cluster.Worker): void|function(!cluster.Worker, number, string): void|function(!cluster.Worker, !cluster.Address): void|function(!cluster.Worker, ?, (!net.Socket|!net.Server)): void|function(?): void} listener
 * @return {!cluster.Cluster}
 */
cluster.on = function(event, listener) {};

/**
 * @param {string} event
 * @param {function(...?): void|function(!cluster.Worker): void|function(!cluster.Worker, number, string): void|function(!cluster.Worker, !cluster.Address): void|function(!cluster.Worker, ?, (!net.Socket|!net.Server)): void|function(?): void} listener
 * @return {!cluster.Cluster}
 */
cluster.once = function(event, listener) {};

/**
 * @param {string} event
 * @param {function(...?): void} listener
 * @return {!cluster.Cluster}
 */
cluster.removeListener = function(event, listener) {};

/**
 * @param {string=} event
 * @return {!cluster.Cluster}
 */
cluster.removeAllListeners = function(event) {};

/**
 * @param {number} n
 * @return {!cluster.Cluster}
 */
cluster.setMaxListeners = function(n) {};

/**
 * @return {number}
 */
cluster.getMaxListeners = function() {};

/**
 * @param {string} event
 * @return {!Array<!Function>}
 */
cluster.listeners = function(event) {};

/**
 * @param {string} type
 * @return {number}
 */
cluster.listenerCount = function(type) {};

/**
 * @param {string} event
 * @param {function(...?): void|function(!cluster.Worker): void|function(!cluster.Worker, number, string): void|function(!cluster.Worker, !cluster.Address): void|function(!cluster.Worker, ?, (!net.Socket|!net.Server)): void|function(?): void} listener
 * @return {!cluster.Cluster}
 */
cluster.prependListener = function(event, listener) {};

/**
 * @param {string} event
 * @param {function(...?): void|function(!cluster.Worker): void|function(!cluster.Worker, number, string): void|function(!cluster.Worker, !cluster.Address): void|function(!cluster.Worker, ?, (!net.Socket|!net.Server)): void|function(?): void} listener
 * @return {!cluster.Cluster}
 */
cluster.prependOnceListener = function(event, listener) {};

/**
 * @return {!Array<string>}
 */
cluster.eventNames = function() {};
