/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from types-v8/stream.d.ts:
// Derived from: declare module "stream"
/** @const */
var stream = {};
/**
 * @extends {events.EventEmitter}
 * @constructor
 * @struct
 */
stream.internal = function() {};

/**
 * @template T
 * @param {stream.T} destination
 * @param {{end: boolean}=} options
 * @return {stream.T}
 */
stream.internal.prototype.pipe = function(destination, options) {};
/**
 * @extends {stream.internal}
 * @constructor
 * @struct
 */
stream.internal.Stream = function() {};
/**
 * @record
 * @struct
 */
stream.internal.ReadableOptions = function() {};
/** @type {number} */
stream.internal.ReadableOptions.prototype.highWaterMark;
/** @type {string} */
stream.internal.ReadableOptions.prototype.encoding;
/** @type {boolean} */
stream.internal.ReadableOptions.prototype.objectMode;
/** @type {function(this: (!stream.internal.Readable), number=): ?} */
stream.internal.ReadableOptions.prototype.read;
/** @type {function(!Error, function(!Error=): void): void} */
stream.internal.ReadableOptions.prototype.destroy;

/**
 * @extends {stream.internal.Stream}
 * @implements {NodeJS.ReadableStream}
 * @constructor
 * @struct
 * @param {!stream.internal.ReadableOptions=} opts
 */
stream.internal.Readable = function(opts) {};
/** @type {boolean} */
stream.internal.Readable.prototype.readable;
/** @type {number} */
stream.internal.Readable.prototype.readableHighWaterMark;

/**
 * @param {number} size
 * @return {void}
 */
stream.internal.Readable.prototype._read = function(size) {};

/**
 * @param {number=} size
 * @return {?}
 */
stream.internal.Readable.prototype.read = function(size) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} encoding
 * @return {THIS}
 */
stream.internal.Readable.prototype.setEncoding = function(encoding) {};

/**
 * @template THIS
 * @this {THIS}
 * @return {THIS}
 */
stream.internal.Readable.prototype.pause = function() {};

/**
 * @template THIS
 * @this {THIS}
 * @return {THIS}
 */
stream.internal.Readable.prototype.resume = function() {};

/**
 * @return {boolean}
 */
stream.internal.Readable.prototype.isPaused = function() {};

/**
 * @template THIS,T
 * @this {THIS}
 * @param {stream.T=} destination
 * @return {THIS}
 */
stream.internal.Readable.prototype.unpipe = function(destination) {};

/**
 * @param {?} chunk
 * @return {void}
 */
stream.internal.Readable.prototype.unshift = function(chunk) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {!NodeJS.ReadableStream} oldStream
 * @return {THIS}
 */
stream.internal.Readable.prototype.wrap = function(oldStream) {};

/**
 * @param {?} chunk
 * @param {string=} encoding
 * @return {boolean}
 */
stream.internal.Readable.prototype.push = function(chunk, encoding) {};

/**
 * @param {!Error} error
 * @param {function(!Error=): void} callback
 * @return {void}
 */
stream.internal.Readable.prototype._destroy = function(error, callback) {};

/**
 * @param {!Error=} error
 * @return {void}
 */
stream.internal.Readable.prototype.destroy = function(error) {};

/**
 * Event emitter
 * The defined events on documents including:
 * 1. close
 * 2. data
 * 3. end
 * 4. readable
 * 5. error
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(): void|function((string|!Buffer)): void|function(!Error): void} listener
 * @return {THIS}
 */
stream.internal.Readable.prototype.addListener = function(event, listener) {};

/**
 * @param {(string|symbol)|string} event
 * @param {...?|(string|!Buffer)|!Error} args_or_chunk_or_err
 * @return {boolean}
 */
stream.internal.Readable.prototype.emit = function(event, args_or_chunk_or_err) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(): void|function((string|!Buffer)): void|function(!Error): void} listener
 * @return {THIS}
 */
stream.internal.Readable.prototype.on = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(): void|function((string|!Buffer)): void|function(!Error): void} listener
 * @return {THIS}
 */
stream.internal.Readable.prototype.once = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(): void|function((string|!Buffer)): void|function(!Error): void} listener
 * @return {THIS}
 */
stream.internal.Readable.prototype.prependListener = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(): void|function((string|!Buffer)): void|function(!Error): void} listener
 * @return {THIS}
 */
stream.internal.Readable.prototype.prependOnceListener = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(): void|function((string|!Buffer)): void|function(!Error): void} listener
 * @return {THIS}
 */
stream.internal.Readable.prototype.removeListener = function(event, listener) {};
/**
 * @record
 * @struct
 */
stream.internal.WritableOptions = function() {};
/** @type {number} */
stream.internal.WritableOptions.prototype.highWaterMark;
/** @type {boolean} */
stream.internal.WritableOptions.prototype.decodeStrings;
/** @type {boolean} */
stream.internal.WritableOptions.prototype.objectMode;
/** @type {function(?, string, !Function): ?} */
stream.internal.WritableOptions.prototype.write;
/** @type {function(!Array<{chunk: ?, encoding: string}>, !Function): ?} */
stream.internal.WritableOptions.prototype.writev;
/** @type {function(!Error, function(!Error=): void): void} */
stream.internal.WritableOptions.prototype.destroy;
/** @type {function(function(!Error=): void): void} */
stream.internal.WritableOptions.prototype.final;

/**
 * @extends {stream.internal.Stream}
 * @implements {NodeJS.WritableStream}
 * @constructor
 * @struct
 * @param {!stream.internal.WritableOptions=} opts
 */
stream.internal.Writable = function(opts) {};
/** @type {boolean} */
stream.internal.Writable.prototype.writable;
/** @type {number} */
stream.internal.Writable.prototype.writableHighWaterMark;

/**
 * @param {?} chunk
 * @param {string} encoding
 * @param {function(!Error=): void} callback
 * @return {void}
 */
stream.internal.Writable.prototype._write = function(chunk, encoding, callback) {};

/**
 * @param {!Array<{chunk: ?, encoding: string}>} chunks
 * @param {function(!Error=): void} callback
 * @return {void}
 */
stream.internal.Writable.prototype._writev = function(chunks, callback) {};

/**
 * @param {!Error} error
 * @param {function(!Error=): void} callback
 * @return {void}
 */
stream.internal.Writable.prototype._destroy = function(error, callback) {};

/**
 * @param {!Function} callback
 * @return {void}
 */
stream.internal.Writable.prototype._final = function(callback) {};

/**
 * @param {?} chunk
 * @param {!Function|string=} cb_or_encoding
 * @param {!Function=} cb
 * @return {boolean}
 */
stream.internal.Writable.prototype.write = function(chunk, cb_or_encoding, cb) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} encoding
 * @return {THIS}
 */
stream.internal.Writable.prototype.setDefaultEncoding = function(encoding) {};

/**
 * @param {!Function|?=} cb_or_chunk
 * @param {!Function|string=} cb_or_encoding
 * @param {!Function=} cb
 * @return {void}
 */
stream.internal.Writable.prototype.end = function(cb_or_chunk, cb_or_encoding, cb) {};

/**
 * @return {void}
 */
stream.internal.Writable.prototype.cork = function() {};

/**
 * @return {void}
 */
stream.internal.Writable.prototype.uncork = function() {};

/**
 * @param {!Error=} error
 * @return {void}
 */
stream.internal.Writable.prototype.destroy = function(error) {};

/**
 * Event emitter
 * The defined events on documents including:
 * 1. close
 * 2. drain
 * 3. error
 * 4. finish
 * 5. pipe
 * 6. unpipe
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(): void|function(!Error): void|function(!stream.internal.Readable): void} listener
 * @return {THIS}
 */
stream.internal.Writable.prototype.addListener = function(event, listener) {};

/**
 * @param {(string|symbol)|string} event
 * @param {...?|(string|!Buffer)|!Error|!stream.internal.Readable} args_or_chunk_or_err_or_src
 * @return {boolean}
 */
stream.internal.Writable.prototype.emit = function(event, args_or_chunk_or_err_or_src) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(): void|function(!Error): void|function(!stream.internal.Readable): void} listener
 * @return {THIS}
 */
stream.internal.Writable.prototype.on = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(): void|function(!Error): void|function(!stream.internal.Readable): void} listener
 * @return {THIS}
 */
stream.internal.Writable.prototype.once = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(): void|function(!Error): void|function(!stream.internal.Readable): void} listener
 * @return {THIS}
 */
stream.internal.Writable.prototype.prependListener = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(): void|function(!Error): void|function(!stream.internal.Readable): void} listener
 * @return {THIS}
 */
stream.internal.Writable.prototype.prependOnceListener = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(): void|function(!Error): void|function(!stream.internal.Readable): void} listener
 * @return {THIS}
 */
stream.internal.Writable.prototype.removeListener = function(event, listener) {};
/**
 * @extends {stream.internal.ReadableOptions}
 * @extends {stream.internal.WritableOptions}
 * @record
 * @struct
 */
stream.internal.DuplexOptions = function() {};
/** @type {boolean} */
stream.internal.DuplexOptions.prototype.allowHalfOpen;
/** @type {boolean} */
stream.internal.DuplexOptions.prototype.readableObjectMode;
/** @type {boolean} */
stream.internal.DuplexOptions.prototype.writableObjectMode;

/**
 * @extends {stream.internal.Readable}
 * @extends {stream.internal.Writable}
 * @constructor
 * @struct
 * @param {!stream.internal.DuplexOptions=} opts
 */
stream.internal.Duplex = function(opts) {};
/** @type {boolean} */
stream.internal.Duplex.prototype.writable;
/** @type {number} */
stream.internal.Duplex.prototype.writableHighWaterMark;

/**
 * @param {?} chunk
 * @param {string} encoding
 * @param {function(!Error=): void} callback
 * @return {void}
 */
stream.internal.Duplex.prototype._write = function(chunk, encoding, callback) {};

/**
 * @param {!Array<{chunk: ?, encoding: string}>} chunks
 * @param {function(!Error=): void} callback
 * @return {void}
 */
stream.internal.Duplex.prototype._writev = function(chunks, callback) {};

/**
 * @param {!Error} error
 * @param {function(!Error=): void} callback
 * @return {void}
 */
stream.internal.Duplex.prototype._destroy = function(error, callback) {};

/**
 * @param {!Function} callback
 * @return {void}
 */
stream.internal.Duplex.prototype._final = function(callback) {};

/**
 * @param {?} chunk
 * @param {!Function|string=} cb_or_encoding
 * @param {!Function=} cb
 * @return {boolean}
 */
stream.internal.Duplex.prototype.write = function(chunk, cb_or_encoding, cb) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} encoding
 * @return {THIS}
 */
stream.internal.Duplex.prototype.setDefaultEncoding = function(encoding) {};

/**
 * @param {!Function|?=} cb_or_chunk
 * @param {!Function|string=} cb_or_encoding
 * @param {!Function=} cb
 * @return {void}
 */
stream.internal.Duplex.prototype.end = function(cb_or_chunk, cb_or_encoding, cb) {};

/**
 * @return {void}
 */
stream.internal.Duplex.prototype.cork = function() {};

/**
 * @return {void}
 */
stream.internal.Duplex.prototype.uncork = function() {};
/**
 * @extends {stream.internal.DuplexOptions}
 * @record
 * @struct
 */
stream.internal.TransformOptions = function() {};
/** @type {function((string|!Buffer), string, !Function): ?} */
stream.internal.TransformOptions.prototype.transform;
/** @type {function(!Function): ?} */
stream.internal.TransformOptions.prototype.flush;

/**
 * @extends {stream.internal.Duplex}
 * @constructor
 * @struct
 * @param {!stream.internal.TransformOptions=} opts
 */
stream.internal.Transform = function(opts) {};

/**
 * @param {?} chunk
 * @param {string} encoding
 * @param {!Function} callback
 * @return {void}
 */
stream.internal.Transform.prototype._transform = function(chunk, encoding, callback) {};

/**
 * @param {!Error=} error
 * @return {void}
 */
stream.internal.Transform.prototype.destroy = function(error) {};
/**
 * @extends {stream.internal.Transform}
 * @constructor
 * @struct
 */
stream.internal.PassThrough = function() {};
