/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from types-v8/zlib.d.ts:
// Derived from: declare module "zlib"
/** @const */
var zlib = {};
/**
 * @record
 * @struct
 */
zlib.ZlibOptions = function() {};
/** @type {number} */
zlib.ZlibOptions.prototype.flush;
/** @type {number} */
zlib.ZlibOptions.prototype.finishFlush;
/** @type {number} */
zlib.ZlibOptions.prototype.chunkSize;
/** @type {number} */
zlib.ZlibOptions.prototype.windowBits;
/** @type {number} */
zlib.ZlibOptions.prototype.level;
/** @type {number} */
zlib.ZlibOptions.prototype.memLevel;
/** @type {number} */
zlib.ZlibOptions.prototype.strategy;
/** @type {?|undefined} */
zlib.ZlibOptions.prototype.dictionary;
/**
 * @record
 * @struct
 */
zlib.Zlib = function() {};
/** @type {number} */
zlib.Zlib.prototype.bytesRead;

/**
 * @param {function(): void=} callback
 * @return {void}
 */
zlib.Zlib.prototype.close = function(callback) {};

/**
 * @param {(number|function(): void)=} kind
 * @param {function(): void=} callback
 * @return {void}
 */
zlib.Zlib.prototype.flush = function(kind, callback) {};
/**
 * @record
 * @struct
 */
zlib.ZlibParams = function() {};

/**
 * @param {number} level
 * @param {number} strategy
 * @param {function(): void} callback
 * @return {void}
 */
zlib.ZlibParams.prototype.params = function(level, strategy, callback) {};
/**
 * @record
 * @struct
 */
zlib.ZlibReset = function() {};

/**
 * @return {void}
 */
zlib.ZlibReset.prototype.reset = function() {};
/**
 * @extends {zlib.Zlib}
 * @extends {stream.Transform}
 * @record
 * @struct
 */
zlib.Gzip = function() {};
/**
 * @extends {zlib.Zlib}
 * @extends {stream.Transform}
 * @record
 * @struct
 */
zlib.Gunzip = function() {};
/**
 * @extends {zlib.Zlib}
 * @extends {stream.Transform}
 * @extends {zlib.ZlibReset}
 * @extends {zlib.ZlibParams}
 * @record
 * @struct
 */
zlib.Deflate = function() {};
/**
 * @extends {zlib.Zlib}
 * @extends {stream.Transform}
 * @extends {zlib.ZlibReset}
 * @record
 * @struct
 */
zlib.Inflate = function() {};
/**
 * @extends {zlib.Zlib}
 * @extends {stream.Transform}
 * @extends {zlib.ZlibReset}
 * @extends {zlib.ZlibParams}
 * @record
 * @struct
 */
zlib.DeflateRaw = function() {};
/**
 * @extends {zlib.Zlib}
 * @extends {stream.Transform}
 * @extends {zlib.ZlibReset}
 * @record
 * @struct
 */
zlib.InflateRaw = function() {};
/**
 * @extends {stream.Transform}
 * @extends {zlib.Zlib}
 * @record
 * @struct
 */
zlib.Unzip = function() {};

/**
 * @param {!zlib.ZlibOptions=} options
 * @return {!zlib.Gzip}
 */
zlib.createGzip = function(options) {};

/**
 * @param {!zlib.ZlibOptions=} options
 * @return {!zlib.Gunzip}
 */
zlib.createGunzip = function(options) {};

/**
 * @param {!zlib.ZlibOptions=} options
 * @return {!zlib.Deflate}
 */
zlib.createDeflate = function(options) {};

/**
 * @param {!zlib.ZlibOptions=} options
 * @return {!zlib.Inflate}
 */
zlib.createInflate = function(options) {};

/**
 * @param {!zlib.ZlibOptions=} options
 * @return {!zlib.DeflateRaw}
 */
zlib.createDeflateRaw = function(options) {};

/**
 * @param {!zlib.ZlibOptions=} options
 * @return {!zlib.InflateRaw}
 */
zlib.createInflateRaw = function(options) {};

/**
 * @param {!zlib.ZlibOptions=} options
 * @return {!zlib.Unzip}
 */
zlib.createUnzip = function(options) {};

/** @typedef {(string|!Buffer|!DataView)} */
zlib.InputType;

/**
 * @param {(string|!Buffer|!DataView)} buf
 * @param {function(!Error, !Buffer): void|!zlib.ZlibOptions} callback_or_options
 * @param {function(!Error, !Buffer): void=} callback
 * @return {void}
 */
zlib.deflate = function(buf, callback_or_options, callback) {};

/**
 * @param {(string|!Buffer|!DataView)} buf
 * @param {!zlib.ZlibOptions=} options
 * @return {!Buffer}
 */
zlib.deflateSync = function(buf, options) {};

/**
 * @param {(string|!Buffer|!DataView)} buf
 * @param {function(!Error, !Buffer): void|!zlib.ZlibOptions} callback_or_options
 * @param {function(!Error, !Buffer): void=} callback
 * @return {void}
 */
zlib.deflateRaw = function(buf, callback_or_options, callback) {};

/**
 * @param {(string|!Buffer|!DataView)} buf
 * @param {!zlib.ZlibOptions=} options
 * @return {!Buffer}
 */
zlib.deflateRawSync = function(buf, options) {};

/**
 * @param {(string|!Buffer|!DataView)} buf
 * @param {function(!Error, !Buffer): void|!zlib.ZlibOptions} callback_or_options
 * @param {function(!Error, !Buffer): void=} callback
 * @return {void}
 */
zlib.gzip = function(buf, callback_or_options, callback) {};

/**
 * @param {(string|!Buffer|!DataView)} buf
 * @param {!zlib.ZlibOptions=} options
 * @return {!Buffer}
 */
zlib.gzipSync = function(buf, options) {};

/**
 * @param {(string|!Buffer|!DataView)} buf
 * @param {function(!Error, !Buffer): void|!zlib.ZlibOptions} callback_or_options
 * @param {function(!Error, !Buffer): void=} callback
 * @return {void}
 */
zlib.gunzip = function(buf, callback_or_options, callback) {};

/**
 * @param {(string|!Buffer|!DataView)} buf
 * @param {!zlib.ZlibOptions=} options
 * @return {!Buffer}
 */
zlib.gunzipSync = function(buf, options) {};

/**
 * @param {(string|!Buffer|!DataView)} buf
 * @param {function(!Error, !Buffer): void|!zlib.ZlibOptions} callback_or_options
 * @param {function(!Error, !Buffer): void=} callback
 * @return {void}
 */
zlib.inflate = function(buf, callback_or_options, callback) {};

/**
 * @param {(string|!Buffer|!DataView)} buf
 * @param {!zlib.ZlibOptions=} options
 * @return {!Buffer}
 */
zlib.inflateSync = function(buf, options) {};

/**
 * @param {(string|!Buffer|!DataView)} buf
 * @param {function(!Error, !Buffer): void|!zlib.ZlibOptions} callback_or_options
 * @param {function(!Error, !Buffer): void=} callback
 * @return {void}
 */
zlib.inflateRaw = function(buf, callback_or_options, callback) {};

/**
 * @param {(string|!Buffer|!DataView)} buf
 * @param {!zlib.ZlibOptions=} options
 * @return {!Buffer}
 */
zlib.inflateRawSync = function(buf, options) {};

/**
 * @param {(string|!Buffer|!DataView)} buf
 * @param {function(!Error, !Buffer): void|!zlib.ZlibOptions} callback_or_options
 * @param {function(!Error, !Buffer): void=} callback
 * @return {void}
 */
zlib.unzip = function(buf, callback_or_options, callback) {};

/**
 * @param {(string|!Buffer|!DataView)} buf
 * @param {!zlib.ZlibOptions=} options
 * @return {!Buffer}
 */
zlib.unzipSync = function(buf, options) {};
/** @const */
zlib.constants = {};
/** @type {number} */
zlib.constants.Z_NO_FLUSH;
/** @type {number} */
zlib.constants.Z_PARTIAL_FLUSH;
/** @type {number} */
zlib.constants.Z_SYNC_FLUSH;
/** @type {number} */
zlib.constants.Z_FULL_FLUSH;
/** @type {number} */
zlib.constants.Z_FINISH;
/** @type {number} */
zlib.constants.Z_BLOCK;
/** @type {number} */
zlib.constants.Z_TREES;
/** @type {number} */
zlib.constants.Z_OK;
/** @type {number} */
zlib.constants.Z_STREAM_END;
/** @type {number} */
zlib.constants.Z_NEED_DICT;
/** @type {number} */
zlib.constants.Z_ERRNO;
/** @type {number} */
zlib.constants.Z_STREAM_ERROR;
/** @type {number} */
zlib.constants.Z_DATA_ERROR;
/** @type {number} */
zlib.constants.Z_MEM_ERROR;
/** @type {number} */
zlib.constants.Z_BUF_ERROR;
/** @type {number} */
zlib.constants.Z_VERSION_ERROR;
/** @type {number} */
zlib.constants.Z_NO_COMPRESSION;
/** @type {number} */
zlib.constants.Z_BEST_SPEED;
/** @type {number} */
zlib.constants.Z_BEST_COMPRESSION;
/** @type {number} */
zlib.constants.Z_DEFAULT_COMPRESSION;
/** @type {number} */
zlib.constants.Z_FILTERED;
/** @type {number} */
zlib.constants.Z_HUFFMAN_ONLY;
/** @type {number} */
zlib.constants.Z_RLE;
/** @type {number} */
zlib.constants.Z_FIXED;
/** @type {number} */
zlib.constants.Z_DEFAULT_STRATEGY;
/** @type {number} */
zlib.Z_NO_FLUSH;
/** @type {number} */
zlib.Z_PARTIAL_FLUSH;
/** @type {number} */
zlib.Z_SYNC_FLUSH;
/** @type {number} */
zlib.Z_FULL_FLUSH;
/** @type {number} */
zlib.Z_FINISH;
/** @type {number} */
zlib.Z_BLOCK;
/** @type {number} */
zlib.Z_TREES;
/** @type {number} */
zlib.Z_OK;
/** @type {number} */
zlib.Z_STREAM_END;
/** @type {number} */
zlib.Z_NEED_DICT;
/** @type {number} */
zlib.Z_ERRNO;
/** @type {number} */
zlib.Z_STREAM_ERROR;
/** @type {number} */
zlib.Z_DATA_ERROR;
/** @type {number} */
zlib.Z_MEM_ERROR;
/** @type {number} */
zlib.Z_BUF_ERROR;
/** @type {number} */
zlib.Z_VERSION_ERROR;
/** @type {number} */
zlib.Z_NO_COMPRESSION;
/** @type {number} */
zlib.Z_BEST_SPEED;
/** @type {number} */
zlib.Z_BEST_COMPRESSION;
/** @type {number} */
zlib.Z_DEFAULT_COMPRESSION;
/** @type {number} */
zlib.Z_FILTERED;
/** @type {number} */
zlib.Z_HUFFMAN_ONLY;
/** @type {number} */
zlib.Z_RLE;
/** @type {number} */
zlib.Z_FIXED;
/** @type {number} */
zlib.Z_DEFAULT_STRATEGY;
/** @type {number} */
zlib.Z_BINARY;
/** @type {number} */
zlib.Z_TEXT;
/** @type {number} */
zlib.Z_ASCII;
/** @type {number} */
zlib.Z_UNKNOWN;
/** @type {number} */
zlib.Z_DEFLATED;
