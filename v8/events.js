/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from types-v8/events.d.ts:
// Derived from: declare module "events"
/** @const */
var events = {};
/**
 * @extends {NodeJS.EventEmitter}
 * @constructor
 * @struct
 */
events = function() {};
/**
 * @extends {events}
 * @constructor
 * @struct
 */
events.EventEmitter = function() {};
/** @type {number} */
events.EventEmitter.defaultMaxListeners;

/**
 * @param {!events.EventEmitter} emitter
 * @param {(string|symbol)} event
 * @return {number}
 */
events.EventEmitter.listenerCount = function(emitter, event) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {(string|symbol)} event
 * @param {function(...?): void} listener
 * @return {THIS}
 */
events.EventEmitter.prototype.addListener = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {(string|symbol)} event
 * @param {function(...?): void} listener
 * @return {THIS}
 */
events.EventEmitter.prototype.on = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {(string|symbol)} event
 * @param {function(...?): void} listener
 * @return {THIS}
 */
events.EventEmitter.prototype.once = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {(string|symbol)} event
 * @param {function(...?): void} listener
 * @return {THIS}
 */
events.EventEmitter.prototype.prependListener = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {(string|symbol)} event
 * @param {function(...?): void} listener
 * @return {THIS}
 */
events.EventEmitter.prototype.prependOnceListener = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {(string|symbol)} event
 * @param {function(...?): void} listener
 * @return {THIS}
 */
events.EventEmitter.prototype.removeListener = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {(string|symbol)=} event
 * @return {THIS}
 */
events.EventEmitter.prototype.removeAllListeners = function(event) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {number} n
 * @return {THIS}
 */
events.EventEmitter.prototype.setMaxListeners = function(n) {};

/**
 * @return {number}
 */
events.EventEmitter.prototype.getMaxListeners = function() {};

/**
 * @param {(string|symbol)} event
 * @return {!Array<!Function>}
 */
events.EventEmitter.prototype.listeners = function(event) {};

/**
 * @param {(string|symbol)} event
 * @param {...?} args
 * @return {boolean}
 */
events.EventEmitter.prototype.emit = function(event, args) {};

/**
 * @return {!Array<(string|symbol)>}
 */
events.EventEmitter.prototype.eventNames = function() {};

/**
 * @param {(string|symbol)} type
 * @return {number}
 */
events.EventEmitter.prototype.listenerCount = function(type) {};
