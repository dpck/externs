/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from types-v8/nodejs.d.ts:
/** @const */
var NodeJS = {};
/**
 * @record
 * @struct
 */
NodeJS.InspectOptions = function() {};
/** @type {boolean} */
NodeJS.InspectOptions.prototype.showHidden;
/** @type {number} */
NodeJS.InspectOptions.prototype.depth;
/** @type {boolean} */
NodeJS.InspectOptions.prototype.colors;
/** @type {boolean} */
NodeJS.InspectOptions.prototype.customInspect;
/** @type {boolean} */
NodeJS.InspectOptions.prototype.showProxy;
/** @type {number} */
NodeJS.InspectOptions.prototype.maxArrayLength;
/** @type {number} */
NodeJS.InspectOptions.prototype.breakLength;
/**
 * @record
 * @struct
 */
NodeJS.ConsoleConstructor = function() {};
/** @type {!Console} */
NodeJS.ConsoleConstructor.prototype.prototype;

/* TODO: ConstructSignature: NodeJS */
/**
 * @record
 * @struct
 */
NodeJS.CallSite = function() {};

/**
 * Value of "this"
 * @return {?}
 */
NodeJS.CallSite.prototype.getThis = function() {};

/**
 * Type of "this" as a string.
 * This is the name of the function stored in the constructor field of
 * "this", if available.  Otherwise the object's [[Class]] internal
 * property.
 * @return {string}
 */
NodeJS.CallSite.prototype.getTypeName = function() {};

/**
 * Current function
 * @return {!Function}
 */
NodeJS.CallSite.prototype.getFunction = function() {};

/**
 * Name of the current function, typically its name property.
 * If a name property is not available an attempt will be made to try
 * to infer a name from the function's context.
 * @return {string}
 */
NodeJS.CallSite.prototype.getFunctionName = function() {};

/**
 * Name of the property [of "this" or one of its prototypes] that holds
 * the current function
 * @return {string}
 */
NodeJS.CallSite.prototype.getMethodName = function() {};

/**
 * Name of the script [if this function was defined in a script]
 * @return {string}
 */
NodeJS.CallSite.prototype.getFileName = function() {};

/**
 * Current line number [if this function was defined in a script]
 * @return {number}
 */
NodeJS.CallSite.prototype.getLineNumber = function() {};

/**
 * Current column number [if this function was defined in a script]
 * @return {number}
 */
NodeJS.CallSite.prototype.getColumnNumber = function() {};

/**
 * A call site object representing the location where eval was called
 * [if this function was created using a call to eval]
 * @return {string}
 */
NodeJS.CallSite.prototype.getEvalOrigin = function() {};

/**
 * Is this a toplevel invocation, that is, is "this" the global object?
 * @return {boolean}
 */
NodeJS.CallSite.prototype.isToplevel = function() {};

/**
 * Does this call take place in code defined by a call to eval?
 * @return {boolean}
 */
NodeJS.CallSite.prototype.isEval = function() {};

/**
 * Is this call in native V8 code?
 * @return {boolean}
 */
NodeJS.CallSite.prototype.isNative = function() {};

/**
 * Is this a constructor call?
 * @return {boolean}
 */
NodeJS.CallSite.prototype.isConstructor = function() {};
/**
 * @extends {Error}
 * @record
 * @struct
 */
NodeJS.ErrnoException = function() {};
/** @type {number} */
NodeJS.ErrnoException.prototype.errno;
/** @type {string} */
NodeJS.ErrnoException.prototype.code;
/** @type {string} */
NodeJS.ErrnoException.prototype.path;
/** @type {string} */
NodeJS.ErrnoException.prototype.syscall;
/** @type {string} */
NodeJS.ErrnoException.prototype.stack;
/**
 * @constructor
 * @struct
 */
NodeJS.EventEmitter = function() {};

/**
 * @template THIS
 * @this {THIS}
 * @param {(string|symbol)} event
 * @param {function(...?): void} listener
 * @return {THIS}
 */
NodeJS.EventEmitter.prototype.addListener = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {(string|symbol)} event
 * @param {function(...?): void} listener
 * @return {THIS}
 */
NodeJS.EventEmitter.prototype.on = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {(string|symbol)} event
 * @param {function(...?): void} listener
 * @return {THIS}
 */
NodeJS.EventEmitter.prototype.once = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {(string|symbol)} event
 * @param {function(...?): void} listener
 * @return {THIS}
 */
NodeJS.EventEmitter.prototype.removeListener = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {(string|symbol)=} event
 * @return {THIS}
 */
NodeJS.EventEmitter.prototype.removeAllListeners = function(event) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {number} n
 * @return {THIS}
 */
NodeJS.EventEmitter.prototype.setMaxListeners = function(n) {};

/**
 * @return {number}
 */
NodeJS.EventEmitter.prototype.getMaxListeners = function() {};

/**
 * @param {(string|symbol)} event
 * @return {!Array<!Function>}
 */
NodeJS.EventEmitter.prototype.listeners = function(event) {};

/**
 * @param {(string|symbol)} event
 * @param {...?} args
 * @return {boolean}
 */
NodeJS.EventEmitter.prototype.emit = function(event, args) {};

/**
 * @param {(string|symbol)} type
 * @return {number}
 */
NodeJS.EventEmitter.prototype.listenerCount = function(type) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {(string|symbol)} event
 * @param {function(...?): void} listener
 * @return {THIS}
 */
NodeJS.EventEmitter.prototype.prependListener = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {(string|symbol)} event
 * @param {function(...?): void} listener
 * @return {THIS}
 */
NodeJS.EventEmitter.prototype.prependOnceListener = function(event, listener) {};

/**
 * @return {!Array<(string|symbol)>}
 */
NodeJS.EventEmitter.prototype.eventNames = function() {};
/**
 * @extends {NodeJS.EventEmitter}
 * @record
 * @struct
 */
NodeJS.ReadableStream = function() {};
/** @type {boolean} */
NodeJS.ReadableStream.prototype.readable;

/**
 * @param {number=} size
 * @return {(string|!Buffer)}
 */
NodeJS.ReadableStream.prototype.read = function(size) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} encoding
 * @return {THIS}
 */
NodeJS.ReadableStream.prototype.setEncoding = function(encoding) {};

/**
 * @template THIS
 * @this {THIS}
 * @return {THIS}
 */
NodeJS.ReadableStream.prototype.pause = function() {};

/**
 * @template THIS
 * @this {THIS}
 * @return {THIS}
 */
NodeJS.ReadableStream.prototype.resume = function() {};

/**
 * @return {boolean}
 */
NodeJS.ReadableStream.prototype.isPaused = function() {};

/**
 * @template T
 * @param {T} destination
 * @param {{end: boolean}=} options
 * @return {T}
 */
NodeJS.ReadableStream.prototype.pipe = function(destination, options) {};

/**
 * @template THIS,T
 * @this {THIS}
 * @param {T=} destination
 * @return {THIS}
 */
NodeJS.ReadableStream.prototype.unpipe = function(destination) {};

/**
 * @param {string|!Buffer} chunk
 * @return {void}
 */
NodeJS.ReadableStream.prototype.unshift = function(chunk) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {!NodeJS.ReadableStream} oldStream
 * @return {THIS}
 */
NodeJS.ReadableStream.prototype.wrap = function(oldStream) {};
/**
 * @extends {NodeJS.EventEmitter}
 * @record
 * @struct
 */
NodeJS.WritableStream = function() {};
/** @type {boolean} */
NodeJS.WritableStream.prototype.writable;

/**
 * @param {(string|!Buffer)|string} buffer_or_str
 * @param {!Function|string=} cb_or_encoding
 * @param {!Function=} cb
 * @return {boolean}
 */
NodeJS.WritableStream.prototype.write = function(buffer_or_str, cb_or_encoding, cb) {};

/**
 * @param {!Function|!Buffer|string=} cb_or_buffer_or_str
 * @param {!Function|string=} cb_or_encoding
 * @param {!Function=} cb
 * @return {void}
 */
NodeJS.WritableStream.prototype.end = function(cb_or_buffer_or_str, cb_or_encoding, cb) {};
/**
 * @extends {NodeJS.ReadableStream}
 * @extends {NodeJS.WritableStream}
 * @record
 * @struct
 */
NodeJS.ReadWriteStream = function() {};
/**
 * @extends {NodeJS.EventEmitter}
 * @record
 * @struct
 */
NodeJS.Events = function() {};
/**
 * @extends {NodeJS.Events}
 * @record
 * @struct
 */
NodeJS.Domain = function() {};

/**
 * @param {!Function} fn
 * @return {void}
 */
NodeJS.Domain.prototype.run = function(fn) {};

/**
 * @param {!NodeJS.Events} emitter
 * @return {void}
 */
NodeJS.Domain.prototype.add = function(emitter) {};

/**
 * @param {!NodeJS.Events} emitter
 * @return {void}
 */
NodeJS.Domain.prototype.remove = function(emitter) {};

/**
 * @param {function(!Error, ?): ?} cb
 * @return {?}
 */
NodeJS.Domain.prototype.bind = function(cb) {};

/**
 * @param {function(?): ?} cb
 * @return {?}
 */
NodeJS.Domain.prototype.intercept = function(cb) {};

/**
 * @return {void}
 */
NodeJS.Domain.prototype.dispose = function() {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void} listener
 * @return {THIS}
 */
NodeJS.Domain.prototype.addListener = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void} listener
 * @return {THIS}
 */
NodeJS.Domain.prototype.on = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void} listener
 * @return {THIS}
 */
NodeJS.Domain.prototype.once = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void} listener
 * @return {THIS}
 */
NodeJS.Domain.prototype.removeListener = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string=} event
 * @return {THIS}
 */
NodeJS.Domain.prototype.removeAllListeners = function(event) {};
/**
 * @record
 * @struct
 */
NodeJS.MemoryUsage = function() {};
/** @type {number} */
NodeJS.MemoryUsage.prototype.rss;
/** @type {number} */
NodeJS.MemoryUsage.prototype.heapTotal;
/** @type {number} */
NodeJS.MemoryUsage.prototype.heapUsed;
/** @type {number} */
NodeJS.MemoryUsage.prototype.external;
/**
 * @record
 * @struct
 */
NodeJS.CpuUsage = function() {};
/** @type {number} */
NodeJS.CpuUsage.prototype.user;
/** @type {number} */
NodeJS.CpuUsage.prototype.system;
/**
 * @record
 * @struct
 */
NodeJS.ProcessRelease = function() {};
/** @type {string} */
NodeJS.ProcessRelease.prototype.name;
/** @type {string} */
NodeJS.ProcessRelease.prototype.sourceUrl;
/** @type {string} */
NodeJS.ProcessRelease.prototype.headersUrl;
/** @type {string} */
NodeJS.ProcessRelease.prototype.libUrl;
/** @type {string} */
NodeJS.ProcessRelease.prototype.lts;
/**
 * @record
 * @struct
 */
NodeJS.ProcessVersions = function() {};
/** @type {string} */
NodeJS.ProcessVersions.prototype.http_parser;
/** @type {string} */
NodeJS.ProcessVersions.prototype.node;
/** @type {string} */
NodeJS.ProcessVersions.prototype.v8;
/** @type {string} */
NodeJS.ProcessVersions.prototype.ares;
/** @type {string} */
NodeJS.ProcessVersions.prototype.uv;
/** @type {string} */
NodeJS.ProcessVersions.prototype.zlib;
/** @type {string} */
NodeJS.ProcessVersions.prototype.modules;
/** @type {string} */
NodeJS.ProcessVersions.prototype.openssl;

/** @typedef {string} */
NodeJS.Platform;

/** @typedef {string} */
NodeJS.Signals;

/** @typedef {function(number): void} */
NodeJS.BeforeExitListener;

/** @typedef {function(): void} */
NodeJS.DisconnectListener;

/** @typedef {function(number): void} */
NodeJS.ExitListener;

/** @typedef {function(!Promise<?>): void} */
NodeJS.RejectionHandledListener;

/** @typedef {function(!Error): void} */
NodeJS.UncaughtExceptionListener;

/** @typedef {function(?, !Promise<?>): void} */
NodeJS.UnhandledRejectionListener;

/** @typedef {function(!Error): void} */
NodeJS.WarningListener;

/** @typedef {function(?, ?): void} */
NodeJS.MessageListener;

/** @typedef {function(): void} */
NodeJS.SignalsListener;

/** @typedef {function((string|symbol), function(...?): void): void} */
NodeJS.NewListenerListener;

/** @typedef {function((string|symbol), function(...?): void): void} */
NodeJS.RemoveListenerListener;
/**
 * @extends {NodeJS.ReadWriteStream}
 * @record
 * @struct
 */
NodeJS.Socket = function() {};
/** @type {boolean} */
NodeJS.Socket.prototype.isTTY;
/**
 * @record
 */
NodeJS.ProcessEnv = function() {};

/* TODO: IndexSignature: NodeJS */
/**
 * @extends {NodeJS.Socket}
 * @record
 * @struct
 */
NodeJS.WriteStream = function() {};
/** @type {number} */
NodeJS.WriteStream.prototype.writableHighWaterMark;
/** @type {number} */
NodeJS.WriteStream.prototype.columns;
/** @type {number} */
NodeJS.WriteStream.prototype.rows;

/**
 * @param {?} chunk
 * @param {string} encoding
 * @param {!Function} callback
 * @return {void}
 */
NodeJS.WriteStream.prototype._write = function(chunk, encoding, callback) {};

/**
 * @param {!Error} err
 * @param {!Function} callback
 * @return {void}
 */
NodeJS.WriteStream.prototype._destroy = function(err, callback) {};

/**
 * @param {!Function} callback
 * @return {void}
 */
NodeJS.WriteStream.prototype._final = function(callback) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} encoding
 * @return {THIS}
 */
NodeJS.WriteStream.prototype.setDefaultEncoding = function(encoding) {};

/**
 * @return {void}
 */
NodeJS.WriteStream.prototype.cork = function() {};

/**
 * @return {void}
 */
NodeJS.WriteStream.prototype.uncork = function() {};

/**
 * @param {!Error=} error
 * @return {void}
 */
NodeJS.WriteStream.prototype.destroy = function(error) {};
/**
 * @extends {NodeJS.Socket}
 * @record
 * @struct
 */
NodeJS.ReadStream = function() {};
/** @type {number} */
NodeJS.ReadStream.prototype.readableHighWaterMark;
/** @type {boolean} */
NodeJS.ReadStream.prototype.isRaw;

/**
 * @param {boolean} mode
 * @return {void}
 */
NodeJS.ReadStream.prototype.setRawMode = function(mode) {};

/**
 * @param {number} size
 * @return {void}
 */
NodeJS.ReadStream.prototype._read = function(size) {};

/**
 * @param {!Error} err
 * @param {!Function} callback
 * @return {void}
 */
NodeJS.ReadStream.prototype._destroy = function(err, callback) {};

/**
 * @param {?} chunk
 * @param {string=} encoding
 * @return {boolean}
 */
NodeJS.ReadStream.prototype.push = function(chunk, encoding) {};

/**
 * @param {!Error=} error
 * @return {void}
 */
NodeJS.ReadStream.prototype.destroy = function(error) {};
/**
 * @extends {NodeJS.EventEmitter}
 * @record
 * @struct
 */
NodeJS.Process = function() {};
/** @type {!NodeJS.WriteStream} */
NodeJS.Process.prototype.stdout;
/** @type {!NodeJS.WriteStream} */
NodeJS.Process.prototype.stderr;
/** @type {!NodeJS.ReadStream} */
NodeJS.Process.prototype.stdin;
/** @type {!Array<string>} */
NodeJS.Process.prototype.argv;
/** @type {string} */
NodeJS.Process.prototype.argv0;
/** @type {!Array<string>} */
NodeJS.Process.prototype.execArgv;
/** @type {string} */
NodeJS.Process.prototype.execPath;
/** @type {number} */
NodeJS.Process.prototype.debugPort;
/** @type {!NodeJS.ProcessEnv} */
NodeJS.Process.prototype.env;
/** @type {number} */
NodeJS.Process.prototype.exitCode;
/** @type {string} */
NodeJS.Process.prototype.version;
/** @type {!NodeJS.ProcessVersions} */
NodeJS.Process.prototype.versions;
/** @type {{target_defaults: {cflags: !Array<?>, default_configuration: string, defines: !Array<string>, include_dirs: !Array<string>, libraries: !Array<string>}, variables: {clang: number, host_arch: string, node_install_npm: boolean, node_install_waf: boolean, node_prefix: string, node_shared_openssl: boolean, node_shared_v8: boolean, node_shared_zlib: boolean, node_use_dtrace: boolean, node_use_etw: boolean, node_use_openssl: boolean, target_arch: string, v8_no_strict_aliasing: number, v8_use_snapshot: boolean, visibility: string}}} */
NodeJS.Process.prototype.config;
/** @type {number} */
NodeJS.Process.prototype.pid;
/** @type {string} */
NodeJS.Process.prototype.title;
/** @type {string} */
NodeJS.Process.prototype.arch;
/** @type {string} */
NodeJS.Process.prototype.platform;
/** @type {!NodeModule} */
NodeJS.Process.prototype.mainModule;
/** @type {!NodeJS.ProcessRelease} */
NodeJS.Process.prototype.release;
/** @type {!NodeJS.Domain} */
NodeJS.Process.prototype.domain;
/** @type {boolean} */
NodeJS.Process.prototype.connected;

/**
 * @return {!NodeJS.Socket}
 */
NodeJS.Process.prototype.openStdin = function() {};

/**
 * @return {void}
 */
NodeJS.Process.prototype.abort = function() {};

/**
 * @param {string} directory
 * @return {void}
 */
NodeJS.Process.prototype.chdir = function(directory) {};

/**
 * @return {string}
 */
NodeJS.Process.prototype.cwd = function() {};

/**
 * @param {(string|!Error)} warning
 * @param {string=} name
 * @param {!Function=} ctor
 * @return {void}
 */
NodeJS.Process.prototype.emitWarning = function(warning, name, ctor) {};

/**
 * @param {number=} code
 * @return {?}
 */
NodeJS.Process.prototype.exit = function(code) {};

/**
 * @return {number}
 */
NodeJS.Process.prototype.getgid = function() {};

/**
 * @param {(string|number)} id
 * @return {void}
 */
NodeJS.Process.prototype.setgid = function(id) {};

/**
 * @return {number}
 */
NodeJS.Process.prototype.getuid = function() {};

/**
 * @param {(string|number)} id
 * @return {void}
 */
NodeJS.Process.prototype.setuid = function(id) {};

/**
 * @return {number}
 */
NodeJS.Process.prototype.geteuid = function() {};

/**
 * @param {(string|number)} id
 * @return {void}
 */
NodeJS.Process.prototype.seteuid = function(id) {};

/**
 * @return {number}
 */
NodeJS.Process.prototype.getegid = function() {};

/**
 * @param {(string|number)} id
 * @return {void}
 */
NodeJS.Process.prototype.setegid = function(id) {};

/**
 * @return {!Array<number>}
 */
NodeJS.Process.prototype.getgroups = function() {};

/**
 * @param {!Array<(string|number)>} groups
 * @return {void}
 */
NodeJS.Process.prototype.setgroups = function(groups) {};

/**
 * @param {number} pid
 * @param {(string|number)=} signal
 * @return {void}
 */
NodeJS.Process.prototype.kill = function(pid, signal) {};

/**
 * @return {!NodeJS.MemoryUsage}
 */
NodeJS.Process.prototype.memoryUsage = function() {};

/**
 * @param {!NodeJS.CpuUsage=} previousValue
 * @return {!NodeJS.CpuUsage}
 */
NodeJS.Process.prototype.cpuUsage = function(previousValue) {};

/**
 * @param {!Function} callback
 * @param {...?} args
 * @return {void}
 */
NodeJS.Process.prototype.nextTick = function(callback, args) {};

/**
 * @param {number=} mask
 * @return {number}
 */
NodeJS.Process.prototype.umask = function(mask) {};

/**
 * @return {number}
 */
NodeJS.Process.prototype.uptime = function() {};

/**
 * @param {!Array<?>=} time
 * @return {!Array<?>}
 */
NodeJS.Process.prototype.hrtime = function(time) {};

/**
 * @param {?} message
 * @param {?=} sendHandle
 * @return {void}
 */
NodeJS.Process.prototype.send = function(message, sendHandle) {};

/**
 * @return {void}
 */
NodeJS.Process.prototype.disconnect = function() {};

/**
 * EventEmitter
 *   1. beforeExit
 *   2. disconnect
 *   3. exit
 *   4. message
 *   5. rejectionHandled
 *   6. uncaughtException
 *   7. unhandledRejection
 *   8. warning
 *   9. message
 *  10. <All OS Signals>
 *  11. newListener/removeListener inherited from EventEmitter
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(number): void|function(): void|function(!Promise<?>): void|function(!Error): void|function(?, !Promise<?>): void|function(?, ?): void|function((string|symbol), function(...?): void): void} listener
 * @return {THIS}
 */
NodeJS.Process.prototype.addListener = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {number|!Promise<?>|!Error|?|(string|symbol)|string=} code_or_promise_or_error_or_reason_or_warning_or_message_or_eventName
 * @param {!Promise<?>|?|function(...?): void=} promise_or_sendHandle_or_listener
 * @return {boolean|THIS}
 */
NodeJS.Process.prototype.emit = function(event, code_or_promise_or_error_or_reason_or_warning_or_message_or_eventName, promise_or_sendHandle_or_listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(number): void|function(): void|function(!Promise<?>): void|function(!Error): void|function(?, !Promise<?>): void|function(?, ?): void|function((string|symbol), function(...?): void): void} listener
 * @return {THIS}
 */
NodeJS.Process.prototype.on = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(number): void|function(): void|function(!Promise<?>): void|function(!Error): void|function(?, !Promise<?>): void|function(?, ?): void|function((string|symbol), function(...?): void): void} listener
 * @return {THIS}
 */
NodeJS.Process.prototype.once = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(number): void|function(): void|function(!Promise<?>): void|function(!Error): void|function(?, !Promise<?>): void|function(?, ?): void|function((string|symbol), function(...?): void): void} listener
 * @return {THIS}
 */
NodeJS.Process.prototype.prependListener = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(number): void|function(): void|function(!Promise<?>): void|function(!Error): void|function(?, !Promise<?>): void|function(?, ?): void|function((string|symbol), function(...?): void): void} listener
 * @return {THIS}
 */
NodeJS.Process.prototype.prependOnceListener = function(event, listener) {};

/**
 * @param {string} event
 * @return {!Array<function(number): void>|!Array<function(): void>|!Array<function(!Promise<?>): void>|!Array<function(!Error): void>|!Array<function(?, !Promise<?>): void>|!Array<function(?, ?): void>|!Array<function((string|symbol), function(...?): void): void>}
 */
NodeJS.Process.prototype.listeners = function(event) {};
/**
 * @record
 * @struct
 */
NodeJS.Global = function() {};
/** @type {!ArrayConstructor} */
NodeJS.Global.prototype.Array;
/** @type {!ArrayBufferConstructor} */
NodeJS.Global.prototype.ArrayBuffer;
/** @type {!BooleanConstructor} */
NodeJS.Global.prototype.Boolean;
/** @type {function(new: (!Buffer), string, string=): ?} */
NodeJS.Global.prototype.Buffer;
/** @type {!DataViewConstructor} */
NodeJS.Global.prototype.DataView;
/** @type {!DateConstructor} */
NodeJS.Global.prototype.Date;
/** @type {!ErrorConstructor} */
NodeJS.Global.prototype.Error;
/** @type {!EvalErrorConstructor} */
NodeJS.Global.prototype.EvalError;
/** @type {!Float32ArrayConstructor} */
NodeJS.Global.prototype.Float32Array;
/** @type {!Float64ArrayConstructor} */
NodeJS.Global.prototype.Float64Array;
/** @type {!FunctionConstructor} */
NodeJS.Global.prototype.Function;
/** @type {!NodeJS.Global} */
NodeJS.Global.prototype.GLOBAL;
/** @type {number} */
NodeJS.Global.prototype.Infinity;
/** @type {!Int16ArrayConstructor} */
NodeJS.Global.prototype.Int16Array;
/** @type {!Int32ArrayConstructor} */
NodeJS.Global.prototype.Int32Array;
/** @type {!Int8ArrayConstructor} */
NodeJS.Global.prototype.Int8Array;
/** @type {?} */
NodeJS.Global.prototype.Intl;
/** @type {!JSON} */
NodeJS.Global.prototype.JSON;
/** @type {!MapConstructor} */
NodeJS.Global.prototype.Map;
/** @type {!Math} */
NodeJS.Global.prototype.Math;
/** @type {number} */
NodeJS.Global.prototype.NaN;
/** @type {!NumberConstructor} */
NodeJS.Global.prototype.Number;
/** @type {!ObjectConstructor} */
NodeJS.Global.prototype.Object;
/** @type {!Function} */
NodeJS.Global.prototype.Promise;
/** @type {!RangeErrorConstructor} */
NodeJS.Global.prototype.RangeError;
/** @type {!ReferenceErrorConstructor} */
NodeJS.Global.prototype.ReferenceError;
/** @type {!RegExpConstructor} */
NodeJS.Global.prototype.RegExp;
/** @type {!SetConstructor} */
NodeJS.Global.prototype.Set;
/** @type {!StringConstructor} */
NodeJS.Global.prototype.String;
/** @type {!Function} */
NodeJS.Global.prototype.Symbol;
/** @type {!SyntaxErrorConstructor} */
NodeJS.Global.prototype.SyntaxError;
/** @type {!TypeErrorConstructor} */
NodeJS.Global.prototype.TypeError;
/** @type {!URIErrorConstructor} */
NodeJS.Global.prototype.URIError;
/** @type {!Uint16ArrayConstructor} */
NodeJS.Global.prototype.Uint16Array;
/** @type {!Uint32ArrayConstructor} */
NodeJS.Global.prototype.Uint32Array;
/** @type {!Uint8ArrayConstructor} */
NodeJS.Global.prototype.Uint8Array;
/** @type {!Function} */
NodeJS.Global.prototype.Uint8ClampedArray;
/** @type {!WeakMapConstructor} */
NodeJS.Global.prototype.WeakMap;
/** @type {!WeakSetConstructor} */
NodeJS.Global.prototype.WeakSet;
/** @type {function(?): void} */
NodeJS.Global.prototype.clearImmediate;
/** @type {function(!NodeJS.Timer): void} */
NodeJS.Global.prototype.clearInterval;
/** @type {function(!NodeJS.Timer): void} */
NodeJS.Global.prototype.clearTimeout;
/** @type {!Console} */
NodeJS.Global.prototype.console;
/** @type {function(string): string} */
NodeJS.Global.prototype.decodeURI;
/** @type {function(string): string} */
NodeJS.Global.prototype.decodeURIComponent;
/** @type {function(string): string} */
NodeJS.Global.prototype.encodeURI;
/** @type {function(string): string} */
NodeJS.Global.prototype.encodeURIComponent;
/** @type {function(string): string} */
NodeJS.Global.prototype.escape;
/** @type {function(string): ?} */
NodeJS.Global.prototype.eval;
/** @type {!NodeJS.Global} */
NodeJS.Global.prototype.global;
/** @type {function(number): boolean} */
NodeJS.Global.prototype.isFinite;
/** @type {function(number): boolean} */
NodeJS.Global.prototype.isNaN;
/** @type {function(string): number} */
NodeJS.Global.prototype.parseFloat;
/** @type {function(string, number=): number} */
NodeJS.Global.prototype.parseInt;
/** @type {!NodeJS.Process} */
NodeJS.Global.prototype.process;
/** @type {!NodeJS.Global} */
NodeJS.Global.prototype.root;
/** @type {function(function(...?): void, ...?): ?} */
NodeJS.Global.prototype.setImmediate;
/** @type {function(function(...?): void, number, ...?): !NodeJS.Timer} */
NodeJS.Global.prototype.setInterval;
/** @type {function(function(...?): void, number, ...?): !NodeJS.Timer} */
NodeJS.Global.prototype.setTimeout;
/** @type {?} */
NodeJS.Global.prototype.undefined;
/** @type {function(string): string} */
NodeJS.Global.prototype.unescape;
/** @type {function(): void} */
NodeJS.Global.prototype.gc;
/** @type {?|undefined} */
NodeJS.Global.prototype.v8debug;
/**
 * @record
 * @struct
 */
NodeJS.Timer = function() {};

/**
 * @return {void}
 */
NodeJS.Timer.prototype.ref = function() {};

/**
 * @return {void}
 */
NodeJS.Timer.prototype.unref = function() {};

/**
 * @constructor
 * @struct
 * @param {string} id
 * @param {!NodeJS.Module=} parent
 */
NodeJS.Module = function(id, parent) {};
/** @type {!Array<string>} */
NodeJS.Module.builtinModules;
/** @type {function(new: (!NodeJS.Module), string, !NodeJS.Module=): ?} */
NodeJS.Module.Module;
/** @type {?} */
NodeJS.Module.prototype.exports;
/** @type {!NodeRequireFunction} */
NodeJS.Module.prototype.require;
/** @type {string} */
NodeJS.Module.prototype.id;
/** @type {string} */
NodeJS.Module.prototype.filename;
/** @type {boolean} */
NodeJS.Module.prototype.loaded;
/** @type {!NodeJS.Module} */
NodeJS.Module.prototype.parent;
/** @type {!Array<!NodeJS.Module>} */
NodeJS.Module.prototype.children;
/** @type {!Array<string>} */
NodeJS.Module.prototype.paths;

/**
 * @return {void}
 */
NodeJS.Module.runMain = function() {};

/**
 * @param {string} code
 * @return {string}
 */
NodeJS.Module.wrap = function(code) {};
/** @type {function(new: (!Buffer), string, string=): ?} */
var GlobalBuffer;
