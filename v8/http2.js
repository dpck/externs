/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from types-v8/http2.d.ts:
// Derived from: declare module "http2"
/** @const */
var http2 = {};
/**
 * @record
 * @struct
 */
http2.StreamPriorityOptions = function() {};
/** @type {boolean} */
http2.StreamPriorityOptions.prototype.exclusive;
/** @type {number} */
http2.StreamPriorityOptions.prototype.parent;
/** @type {number} */
http2.StreamPriorityOptions.prototype.weight;
/** @type {boolean} */
http2.StreamPriorityOptions.prototype.silent;
/**
 * @record
 * @struct
 */
http2.StreamState = function() {};
/** @type {number} */
http2.StreamState.prototype.localWindowSize;
/** @type {number} */
http2.StreamState.prototype.state;
/** @type {number} */
http2.StreamState.prototype.streamLocalClose;
/** @type {number} */
http2.StreamState.prototype.streamRemoteClose;
/** @type {number} */
http2.StreamState.prototype.sumDependencyWeight;
/** @type {number} */
http2.StreamState.prototype.weight;
/**
 * @record
 * @struct
 */
http2.ServerStreamResponseOptions = function() {};
/** @type {boolean} */
http2.ServerStreamResponseOptions.prototype.endStream;
/** @type {function(!http.OutgoingHttpHeaders): void} */
http2.ServerStreamResponseOptions.prototype.getTrailers;
/**
 * @record
 * @struct
 */
http2.StatOptions = function() {};
/** @type {number} */
http2.StatOptions.prototype.offset;
/** @type {number} */
http2.StatOptions.prototype.length;
/**
 * @record
 * @struct
 */
http2.ServerStreamFileResponseOptions = function() {};
/** @type {function(!fs.Stats, !http.OutgoingHttpHeaders, !http2.StatOptions): (boolean|void)} */
http2.ServerStreamFileResponseOptions.prototype.statCheck;
/** @type {function(!http.OutgoingHttpHeaders): void} */
http2.ServerStreamFileResponseOptions.prototype.getTrailers;
/** @type {number} */
http2.ServerStreamFileResponseOptions.prototype.offset;
/** @type {number} */
http2.ServerStreamFileResponseOptions.prototype.length;
/**
 * @extends {http2.ServerStreamFileResponseOptions}
 * @record
 * @struct
 */
http2.ServerStreamFileResponseOptionsWithError = function() {};
/** @type {function(!NodeJS.ErrnoException): void} */
http2.ServerStreamFileResponseOptionsWithError.prototype.onError;
/**
 * @extends {stream.Duplex}
 * @record
 * @struct
 */
http2.Http2Stream = function() {};
/** @type {boolean} */
http2.Http2Stream.prototype.aborted;
/** @type {boolean} */
http2.Http2Stream.prototype.destroyed;
/** @type {number} */
http2.Http2Stream.prototype.rstCode;
/** @type {!http2.Http2Session} */
http2.Http2Stream.prototype.session;
/** @type {!http2.StreamState} */
http2.Http2Stream.prototype.state;

/**
 * @param {!http2.StreamPriorityOptions} options
 * @return {void}
 */
http2.Http2Stream.prototype.priority = function(options) {};

/**
 * @param {number} code
 * @return {void}
 */
http2.Http2Stream.prototype.rstStream = function(code) {};

/**
 * @return {void}
 */
http2.Http2Stream.prototype.rstWithNoError = function() {};

/**
 * @return {void}
 */
http2.Http2Stream.prototype.rstWithProtocolError = function() {};

/**
 * @return {void}
 */
http2.Http2Stream.prototype.rstWithCancel = function() {};

/**
 * @return {void}
 */
http2.Http2Stream.prototype.rstWithRefuse = function() {};

/**
 * @return {void}
 */
http2.Http2Stream.prototype.rstWithInternalError = function() {};

/**
 * @param {number} msecs
 * @param {function(): void=} callback
 * @return {void}
 */
http2.Http2Stream.prototype.setTimeout = function(msecs, callback) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(): void|function((string|!Buffer)): void|function(!Error): void|function(number, number): void|function(!stream.Readable): void|function(number): void|function(!http.IncomingHttpHeaders, number): void} listener
 * @return {THIS}
 */
http2.Http2Stream.prototype.addListener = function(event, listener) {};

/**
 * @param {(string|symbol)|string} event
 * @param {...?|(string|!Buffer)|!Error|number|!stream.Readable|!http.IncomingHttpHeaders} args_or_chunk_or_err_or_frameType_or_src_or_code_or_trailers
 * @return {boolean}
 */
http2.Http2Stream.prototype.emit = function(event, args_or_chunk_or_err_or_frameType_or_src_or_code_or_trailers) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(): void|function((string|!Buffer)): void|function(!Error): void|function(number, number): void|function(!stream.Readable): void|function(number): void|function(!http.IncomingHttpHeaders, number): void} listener
 * @return {THIS}
 */
http2.Http2Stream.prototype.on = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(): void|function((string|!Buffer)): void|function(!Error): void|function(number, number): void|function(!stream.Readable): void|function(number): void|function(!http.IncomingHttpHeaders, number): void} listener
 * @return {THIS}
 */
http2.Http2Stream.prototype.once = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(): void|function((string|!Buffer)): void|function(!Error): void|function(number, number): void|function(!stream.Readable): void|function(number): void|function(!http.IncomingHttpHeaders, number): void} listener
 * @return {THIS}
 */
http2.Http2Stream.prototype.prependListener = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(): void|function((string|!Buffer)): void|function(!Error): void|function(number, number): void|function(!stream.Readable): void|function(number): void|function(!http.IncomingHttpHeaders, number): void} listener
 * @return {THIS}
 */
http2.Http2Stream.prototype.prependOnceListener = function(event, listener) {};
/**
 * @extends {http2.Http2Stream}
 * @record
 * @struct
 */
http2.ClientHttp2Stream = function() {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(!http.IncomingHttpHeaders, number): void} listener
 * @return {THIS}
 */
http2.ClientHttp2Stream.prototype.addListener = function(event, listener) {};

/**
 * @param {(string|symbol)|string} event
 * @param {...?|!http.IncomingHttpHeaders} args_or_headers
 * @return {boolean}
 */
http2.ClientHttp2Stream.prototype.emit = function(event, args_or_headers) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(!http.IncomingHttpHeaders, number): void} listener
 * @return {THIS}
 */
http2.ClientHttp2Stream.prototype.on = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(!http.IncomingHttpHeaders, number): void} listener
 * @return {THIS}
 */
http2.ClientHttp2Stream.prototype.once = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(!http.IncomingHttpHeaders, number): void} listener
 * @return {THIS}
 */
http2.ClientHttp2Stream.prototype.prependListener = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(!http.IncomingHttpHeaders, number): void} listener
 * @return {THIS}
 */
http2.ClientHttp2Stream.prototype.prependOnceListener = function(event, listener) {};
/**
 * @extends {http2.Http2Stream}
 * @record
 * @struct
 */
http2.ServerHttp2Stream = function() {};
/** @type {boolean} */
http2.ServerHttp2Stream.prototype.headersSent;
/** @type {boolean} */
http2.ServerHttp2Stream.prototype.pushAllowed;

/**
 * @param {!http.OutgoingHttpHeaders} headers
 * @return {void}
 */
http2.ServerHttp2Stream.prototype.additionalHeaders = function(headers) {};

/**
 * @param {!http.OutgoingHttpHeaders} headers
 * @param {function(!http2.ServerHttp2Stream): void|!http2.StreamPriorityOptions=} callback_or_options
 * @param {function(!http2.ServerHttp2Stream): void=} callback
 * @return {void}
 */
http2.ServerHttp2Stream.prototype.pushStream = function(headers, callback_or_options, callback) {};

/**
 * @param {!http.OutgoingHttpHeaders=} headers
 * @param {!http2.ServerStreamResponseOptions=} options
 * @return {void}
 */
http2.ServerHttp2Stream.prototype.respond = function(headers, options) {};

/**
 * @param {number} fd
 * @param {!http.OutgoingHttpHeaders=} headers
 * @param {!http2.ServerStreamFileResponseOptions=} options
 * @return {void}
 */
http2.ServerHttp2Stream.prototype.respondWithFD = function(fd, headers, options) {};

/**
 * @param {string} path
 * @param {!http.OutgoingHttpHeaders=} headers
 * @param {!http2.ServerStreamFileResponseOptionsWithError=} options
 * @return {void}
 */
http2.ServerHttp2Stream.prototype.respondWithFile = function(path, headers, options) {};
/**
 * @record
 * @struct
 */
http2.Settings = function() {};
/** @type {number} */
http2.Settings.prototype.headerTableSize;
/** @type {boolean} */
http2.Settings.prototype.enablePush;
/** @type {number} */
http2.Settings.prototype.initialWindowSize;
/** @type {number} */
http2.Settings.prototype.maxFrameSize;
/** @type {number} */
http2.Settings.prototype.maxConcurrentStreams;
/** @type {number} */
http2.Settings.prototype.maxHeaderListSize;
/**
 * @record
 * @struct
 */
http2.ClientSessionRequestOptions = function() {};
/** @type {boolean} */
http2.ClientSessionRequestOptions.prototype.endStream;
/** @type {boolean} */
http2.ClientSessionRequestOptions.prototype.exclusive;
/** @type {number} */
http2.ClientSessionRequestOptions.prototype.parent;
/** @type {number} */
http2.ClientSessionRequestOptions.prototype.weight;
/** @type {function(!http.OutgoingHttpHeaders, number): void} */
http2.ClientSessionRequestOptions.prototype.getTrailers;
/**
 * @record
 * @struct
 */
http2.SessionShutdownOptions = function() {};
/** @type {boolean} */
http2.SessionShutdownOptions.prototype.graceful;
/** @type {number} */
http2.SessionShutdownOptions.prototype.errorCode;
/** @type {number} */
http2.SessionShutdownOptions.prototype.lastStreamID;
/** @type {(!Buffer|!Uint8Array)} */
http2.SessionShutdownOptions.prototype.opaqueData;
/**
 * @record
 * @struct
 */
http2.SessionState = function() {};
/** @type {number} */
http2.SessionState.prototype.effectiveLocalWindowSize;
/** @type {number} */
http2.SessionState.prototype.effectiveRecvDataLength;
/** @type {number} */
http2.SessionState.prototype.nextStreamID;
/** @type {number} */
http2.SessionState.prototype.localWindowSize;
/** @type {number} */
http2.SessionState.prototype.lastProcStreamID;
/** @type {number} */
http2.SessionState.prototype.remoteWindowSize;
/** @type {number} */
http2.SessionState.prototype.outboundQueueSize;
/** @type {number} */
http2.SessionState.prototype.deflateDynamicTableSize;
/** @type {number} */
http2.SessionState.prototype.inflateDynamicTableSize;
/**
 * @extends {events.EventEmitter}
 * @record
 * @struct
 */
http2.Http2Session = function() {};
/** @type {boolean} */
http2.Http2Session.prototype.destroyed;
/** @type {!http2.Settings} */
http2.Http2Session.prototype.localSettings;
/** @type {boolean} */
http2.Http2Session.prototype.pendingSettingsAck;
/** @type {!http2.Settings} */
http2.Http2Session.prototype.remoteSettings;
/** @type {(!net.Socket|!tls.TLSSocket)} */
http2.Http2Session.prototype.socket;
/** @type {!http2.SessionState} */
http2.Http2Session.prototype.state;
/** @type {number} */
http2.Http2Session.prototype.type;

/**
 * @return {void}
 */
http2.Http2Session.prototype.destroy = function() {};

/**
 * @param {!http2.Http2Stream} stream
 * @param {number=} code
 * @return {void}
 */
http2.Http2Session.prototype.rstStream = function(stream, code) {};

/**
 * @param {number} msecs
 * @param {function(): void=} callback
 * @return {void}
 */
http2.Http2Session.prototype.setTimeout = function(msecs, callback) {};

/**
 * @param {function(): void|!http2.SessionShutdownOptions=} callback_or_options
 * @param {function(): void=} callback
 * @return {void}
 */
http2.Http2Session.prototype.shutdown = function(callback_or_options, callback) {};

/**
 * @param {!http2.Http2Stream} stream
 * @param {!http2.StreamPriorityOptions} options
 * @return {void}
 */
http2.Http2Session.prototype.priority = function(stream, options) {};

/**
 * @param {!http2.Settings} settings
 * @return {void}
 */
http2.Http2Session.prototype.settings = function(settings) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(): void|function(!Error): void|function(number, number, number): void|function(number, number, !Buffer): void|function(!http2.Settings): void} listener
 * @return {THIS}
 */
http2.Http2Session.prototype.addListener = function(event, listener) {};

/**
 * @param {(string|symbol)|string} event
 * @param {...?|!Error|number|!http2.Settings} args_or_err_or_frameType_or_errorCode_or_settings
 * @return {boolean}
 */
http2.Http2Session.prototype.emit = function(event, args_or_err_or_frameType_or_errorCode_or_settings) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(): void|function(!Error): void|function(number, number, number): void|function(number, number, !Buffer): void|function(!http2.Settings): void} listener
 * @return {THIS}
 */
http2.Http2Session.prototype.on = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(): void|function(!Error): void|function(number, number, number): void|function(number, number, !Buffer): void|function(!http2.Settings): void} listener
 * @return {THIS}
 */
http2.Http2Session.prototype.once = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(): void|function(!Error): void|function(number, number, number): void|function(number, number, !Buffer): void|function(!http2.Settings): void} listener
 * @return {THIS}
 */
http2.Http2Session.prototype.prependListener = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(): void|function(!Error): void|function(number, number, number): void|function(number, number, !Buffer): void|function(!http2.Settings): void} listener
 * @return {THIS}
 */
http2.Http2Session.prototype.prependOnceListener = function(event, listener) {};
/**
 * @extends {http2.Http2Session}
 * @record
 * @struct
 */
http2.ClientHttp2Session = function() {};

/**
 * @param {!http.OutgoingHttpHeaders=} headers
 * @param {!http2.ClientSessionRequestOptions=} options
 * @return {!http2.ClientHttp2Stream}
 */
http2.ClientHttp2Session.prototype.request = function(headers, options) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(!http2.ClientHttp2Session, (!net.Socket|!tls.TLSSocket)): void|function(!http2.ClientHttp2Stream, !http.IncomingHttpHeaders, number): void} listener
 * @return {THIS}
 */
http2.ClientHttp2Session.prototype.addListener = function(event, listener) {};

/**
 * @param {(string|symbol)|string} event
 * @param {...?|!http2.ClientHttp2Session|!http2.ClientHttp2Stream} args_or_session_or_stream
 * @return {boolean}
 */
http2.ClientHttp2Session.prototype.emit = function(event, args_or_session_or_stream) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(!http2.ClientHttp2Session, (!net.Socket|!tls.TLSSocket)): void|function(!http2.ClientHttp2Stream, !http.IncomingHttpHeaders, number): void} listener
 * @return {THIS}
 */
http2.ClientHttp2Session.prototype.on = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(!http2.ClientHttp2Session, (!net.Socket|!tls.TLSSocket)): void|function(!http2.ClientHttp2Stream, !http.IncomingHttpHeaders, number): void} listener
 * @return {THIS}
 */
http2.ClientHttp2Session.prototype.once = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(!http2.ClientHttp2Session, (!net.Socket|!tls.TLSSocket)): void|function(!http2.ClientHttp2Stream, !http.IncomingHttpHeaders, number): void} listener
 * @return {THIS}
 */
http2.ClientHttp2Session.prototype.prependListener = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(!http2.ClientHttp2Session, (!net.Socket|!tls.TLSSocket)): void|function(!http2.ClientHttp2Stream, !http.IncomingHttpHeaders, number): void} listener
 * @return {THIS}
 */
http2.ClientHttp2Session.prototype.prependOnceListener = function(event, listener) {};
/**
 * @extends {http2.Http2Session}
 * @record
 * @struct
 */
http2.ServerHttp2Session = function() {};
/** @type {(!http2.Http2Server|!http2.Http2SecureServer)} */
http2.ServerHttp2Session.prototype.server;

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(!http2.ServerHttp2Session, (!net.Socket|!tls.TLSSocket)): void|function(!http2.ServerHttp2Stream, !http.IncomingHttpHeaders, number): void} listener
 * @return {THIS}
 */
http2.ServerHttp2Session.prototype.addListener = function(event, listener) {};

/**
 * @param {(string|symbol)|string} event
 * @param {...?|!http2.ServerHttp2Session|!http2.ServerHttp2Stream} args_or_session_or_stream
 * @return {boolean}
 */
http2.ServerHttp2Session.prototype.emit = function(event, args_or_session_or_stream) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(!http2.ServerHttp2Session, (!net.Socket|!tls.TLSSocket)): void|function(!http2.ServerHttp2Stream, !http.IncomingHttpHeaders, number): void} listener
 * @return {THIS}
 */
http2.ServerHttp2Session.prototype.on = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(!http2.ServerHttp2Session, (!net.Socket|!tls.TLSSocket)): void|function(!http2.ServerHttp2Stream, !http.IncomingHttpHeaders, number): void} listener
 * @return {THIS}
 */
http2.ServerHttp2Session.prototype.once = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(!http2.ServerHttp2Session, (!net.Socket|!tls.TLSSocket)): void|function(!http2.ServerHttp2Stream, !http.IncomingHttpHeaders, number): void} listener
 * @return {THIS}
 */
http2.ServerHttp2Session.prototype.prependListener = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(!http2.ServerHttp2Session, (!net.Socket|!tls.TLSSocket)): void|function(!http2.ServerHttp2Stream, !http.IncomingHttpHeaders, number): void} listener
 * @return {THIS}
 */
http2.ServerHttp2Session.prototype.prependOnceListener = function(event, listener) {};
/**
 * @record
 * @struct
 */
http2.SessionOptions = function() {};
/** @type {number} */
http2.SessionOptions.prototype.maxDeflateDynamicTableSize;
/** @type {number} */
http2.SessionOptions.prototype.maxReservedRemoteStreams;
/** @type {number} */
http2.SessionOptions.prototype.maxSendHeaderBlockLength;
/** @type {number} */
http2.SessionOptions.prototype.paddingStrategy;
/** @type {number} */
http2.SessionOptions.prototype.peerMaxConcurrentStreams;
/** @type {function(number, number): number} */
http2.SessionOptions.prototype.selectPadding;
/** @type {!http2.Settings} */
http2.SessionOptions.prototype.settings;

/** @typedef {!http2.SessionOptions} */
http2.ClientSessionOptions;

/** @typedef {!http2.SessionOptions} */
http2.ServerSessionOptions;
/**
 * @extends {http2.SessionOptions}
 * @extends {tls.ConnectionOptions}
 * @record
 * @struct
 */
http2.SecureClientSessionOptions = function() {};
/**
 * @extends {http2.SessionOptions}
 * @extends {tls.TlsOptions}
 * @record
 * @struct
 */
http2.SecureServerSessionOptions = function() {};
/**
 * @extends {http2.SessionOptions}
 * @record
 * @struct
 */
http2.ServerOptions = function() {};
/**
 * @extends {http2.SecureServerSessionOptions}
 * @record
 * @struct
 */
http2.SecureServerOptions = function() {};
/** @type {boolean} */
http2.SecureServerOptions.prototype.allowHTTP1;
/**
 * @extends {net.Server}
 * @record
 * @struct
 */
http2.Http2Server = function() {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(!http2.Http2ServerRequest, !http2.Http2ServerResponse): void|function(!Error): void|function(!http2.ServerHttp2Stream, !http.IncomingHttpHeaders, number): void|function(): void} listener
 * @return {THIS}
 */
http2.Http2Server.prototype.addListener = function(event, listener) {};

/**
 * @param {(string|symbol)|string} event
 * @param {...?|!http2.Http2ServerRequest|!Error|!http2.ServerHttp2Stream} args_or_request_or_err_or_stream
 * @return {boolean}
 */
http2.Http2Server.prototype.emit = function(event, args_or_request_or_err_or_stream) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(!http2.Http2ServerRequest, !http2.Http2ServerResponse): void|function(!Error): void|function(!http2.ServerHttp2Stream, !http.IncomingHttpHeaders, number): void|function(): void} listener
 * @return {THIS}
 */
http2.Http2Server.prototype.on = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(!http2.Http2ServerRequest, !http2.Http2ServerResponse): void|function(!Error): void|function(!http2.ServerHttp2Stream, !http.IncomingHttpHeaders, number): void|function(): void} listener
 * @return {THIS}
 */
http2.Http2Server.prototype.once = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(!http2.Http2ServerRequest, !http2.Http2ServerResponse): void|function(!Error): void|function(!http2.ServerHttp2Stream, !http.IncomingHttpHeaders, number): void|function(): void} listener
 * @return {THIS}
 */
http2.Http2Server.prototype.prependListener = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(!http2.Http2ServerRequest, !http2.Http2ServerResponse): void|function(!Error): void|function(!http2.ServerHttp2Stream, !http.IncomingHttpHeaders, number): void|function(): void} listener
 * @return {THIS}
 */
http2.Http2Server.prototype.prependOnceListener = function(event, listener) {};
/**
 * @extends {tls.Server}
 * @record
 * @struct
 */
http2.Http2SecureServer = function() {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(!http2.Http2ServerRequest, !http2.Http2ServerResponse): void|function(!Error): void|function(!http2.ServerHttp2Stream, !http.IncomingHttpHeaders, number): void|function(): void|function(!tls.TLSSocket): void} listener
 * @return {THIS}
 */
http2.Http2SecureServer.prototype.addListener = function(event, listener) {};

/**
 * @param {(string|symbol)|string} event
 * @param {...?|!http2.Http2ServerRequest|!Error|!http2.ServerHttp2Stream|!tls.TLSSocket} args_or_request_or_err_or_stream_or_socket
 * @return {boolean}
 */
http2.Http2SecureServer.prototype.emit = function(event, args_or_request_or_err_or_stream_or_socket) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(!http2.Http2ServerRequest, !http2.Http2ServerResponse): void|function(!Error): void|function(!http2.ServerHttp2Stream, !http.IncomingHttpHeaders, number): void|function(): void|function(!tls.TLSSocket): void} listener
 * @return {THIS}
 */
http2.Http2SecureServer.prototype.on = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(!http2.Http2ServerRequest, !http2.Http2ServerResponse): void|function(!Error): void|function(!http2.ServerHttp2Stream, !http.IncomingHttpHeaders, number): void|function(): void|function(!tls.TLSSocket): void} listener
 * @return {THIS}
 */
http2.Http2SecureServer.prototype.once = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(!http2.Http2ServerRequest, !http2.Http2ServerResponse): void|function(!Error): void|function(!http2.ServerHttp2Stream, !http.IncomingHttpHeaders, number): void|function(): void|function(!tls.TLSSocket): void} listener
 * @return {THIS}
 */
http2.Http2SecureServer.prototype.prependListener = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(!http2.Http2ServerRequest, !http2.Http2ServerResponse): void|function(!Error): void|function(!http2.ServerHttp2Stream, !http.IncomingHttpHeaders, number): void|function(): void|function(!tls.TLSSocket): void} listener
 * @return {THIS}
 */
http2.Http2SecureServer.prototype.prependOnceListener = function(event, listener) {};

/**
 * @extends {stream.Readable}
 * @constructor
 * @struct
 * @private
 */
http2.Http2ServerRequest = function() {};
/** @type {!http.IncomingHttpHeaders} */
http2.Http2ServerRequest.prototype.headers;
/** @type {string} */
http2.Http2ServerRequest.prototype.httpVersion;
/** @type {string} */
http2.Http2ServerRequest.prototype.method;
/** @type {!Array<string>} */
http2.Http2ServerRequest.prototype.rawHeaders;
/** @type {!Array<string>} */
http2.Http2ServerRequest.prototype.rawTrailers;
/** @type {(!net.Socket|!tls.TLSSocket)} */
http2.Http2ServerRequest.prototype.socket;
/** @type {!http2.ServerHttp2Stream} */
http2.Http2ServerRequest.prototype.stream;
/** @type {!http.IncomingHttpHeaders} */
http2.Http2ServerRequest.prototype.trailers;
/** @type {string} */
http2.Http2ServerRequest.prototype.url;

/**
 * @param {number} msecs
 * @param {function(): void=} callback
 * @return {void}
 */
http2.Http2ServerRequest.prototype.setTimeout = function(msecs, callback) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(boolean, number): void} listener
 * @return {THIS}
 */
http2.Http2ServerRequest.prototype.addListener = function(event, listener) {};

/**
 * @param {(string|symbol)|string} event
 * @param {...?|boolean} args_or_hadError
 * @return {boolean}
 */
http2.Http2ServerRequest.prototype.emit = function(event, args_or_hadError) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(boolean, number): void} listener
 * @return {THIS}
 */
http2.Http2ServerRequest.prototype.on = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(boolean, number): void} listener
 * @return {THIS}
 */
http2.Http2ServerRequest.prototype.once = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(boolean, number): void} listener
 * @return {THIS}
 */
http2.Http2ServerRequest.prototype.prependListener = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(boolean, number): void} listener
 * @return {THIS}
 */
http2.Http2ServerRequest.prototype.prependOnceListener = function(event, listener) {};

/**
 * @extends {events.EventEmitter}
 * @constructor
 * @struct
 * @private
 */
http2.Http2ServerResponse = function() {};
/** @type {(!net.Socket|!tls.TLSSocket)} */
http2.Http2ServerResponse.prototype.connection;
/** @type {boolean} */
http2.Http2ServerResponse.prototype.finished;
/** @type {boolean} */
http2.Http2ServerResponse.prototype.headersSent;
/** @type {boolean} */
http2.Http2ServerResponse.prototype.sendDate;
/** @type {(!net.Socket|!tls.TLSSocket)} */
http2.Http2ServerResponse.prototype.socket;
/** @type {number} */
http2.Http2ServerResponse.prototype.statusCode;
/** @type {string} */
http2.Http2ServerResponse.prototype.statusMessage;
/** @type {!http2.ServerHttp2Stream} */
http2.Http2ServerResponse.prototype.stream;

/**
 * @param {!http.OutgoingHttpHeaders} trailers
 * @return {void}
 */
http2.Http2ServerResponse.prototype.addTrailers = function(trailers) {};

/**
 * @param {function(): void|(string|!Buffer)=} callback_or_data
 * @param {function(): void|string=} callback_or_encoding
 * @param {function(): void=} callback
 * @return {void}
 */
http2.Http2ServerResponse.prototype.end = function(callback_or_data, callback_or_encoding, callback) {};

/**
 * @param {string} name
 * @return {string}
 */
http2.Http2ServerResponse.prototype.getHeader = function(name) {};

/**
 * @return {!Array<string>}
 */
http2.Http2ServerResponse.prototype.getHeaderNames = function() {};

/**
 * @return {!http.OutgoingHttpHeaders}
 */
http2.Http2ServerResponse.prototype.getHeaders = function() {};

/**
 * @param {string} name
 * @return {boolean}
 */
http2.Http2ServerResponse.prototype.hasHeader = function(name) {};

/**
 * @param {string} name
 * @return {void}
 */
http2.Http2ServerResponse.prototype.removeHeader = function(name) {};

/**
 * @param {string} name
 * @param {(string|number|!Array<string>)} value
 * @return {void}
 */
http2.Http2ServerResponse.prototype.setHeader = function(name, value) {};

/**
 * @param {number} msecs
 * @param {function(): void=} callback
 * @return {void}
 */
http2.Http2ServerResponse.prototype.setTimeout = function(msecs, callback) {};

/**
 * @param {(string|!Buffer)} chunk
 * @param {function(!Error): void|string=} callback_or_encoding
 * @param {function(!Error): void=} callback
 * @return {boolean}
 */
http2.Http2ServerResponse.prototype.write = function(chunk, callback_or_encoding, callback) {};

/**
 * @return {void}
 */
http2.Http2ServerResponse.prototype.writeContinue = function() {};

/**
 * @param {number} statusCode
 * @param {!http.OutgoingHttpHeaders|string=} headers_or_statusMessage
 * @param {!http.OutgoingHttpHeaders=} headers
 * @return {void}
 */
http2.Http2ServerResponse.prototype.writeHead = function(statusCode, headers_or_statusMessage, headers) {};

/**
 * @param {!http.OutgoingHttpHeaders} headers
 * @param {function(!Error, !http2.Http2ServerResponse): void} callback
 * @return {void}
 */
http2.Http2ServerResponse.prototype.createPushResponse = function(headers, callback) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(boolean, number): void|function(): void|function(!Error): void} listener
 * @return {THIS}
 */
http2.Http2ServerResponse.prototype.addListener = function(event, listener) {};

/**
 * @param {(string|symbol)|string} event
 * @param {...?|boolean|!Error} args_or_hadError_or_error
 * @return {boolean}
 */
http2.Http2ServerResponse.prototype.emit = function(event, args_or_hadError_or_error) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(boolean, number): void|function(): void|function(!Error): void} listener
 * @return {THIS}
 */
http2.Http2ServerResponse.prototype.on = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(boolean, number): void|function(): void|function(!Error): void} listener
 * @return {THIS}
 */
http2.Http2ServerResponse.prototype.once = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(boolean, number): void|function(): void|function(!Error): void} listener
 * @return {THIS}
 */
http2.Http2ServerResponse.prototype.prependListener = function(event, listener) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(...?): void|function(boolean, number): void|function(): void|function(!Error): void} listener
 * @return {THIS}
 */
http2.Http2ServerResponse.prototype.prependOnceListener = function(event, listener) {};
/** @const */
http2.constants = {};
/** @type {number} */
http2.constants.NGHTTP2_SESSION_SERVER;
/** @type {number} */
http2.constants.NGHTTP2_SESSION_CLIENT;
/** @type {number} */
http2.constants.NGHTTP2_STREAM_STATE_IDLE;
/** @type {number} */
http2.constants.NGHTTP2_STREAM_STATE_OPEN;
/** @type {number} */
http2.constants.NGHTTP2_STREAM_STATE_RESERVED_LOCAL;
/** @type {number} */
http2.constants.NGHTTP2_STREAM_STATE_RESERVED_REMOTE;
/** @type {number} */
http2.constants.NGHTTP2_STREAM_STATE_HALF_CLOSED_LOCAL;
/** @type {number} */
http2.constants.NGHTTP2_STREAM_STATE_HALF_CLOSED_REMOTE;
/** @type {number} */
http2.constants.NGHTTP2_STREAM_STATE_CLOSED;
/** @type {number} */
http2.constants.NGHTTP2_NO_ERROR;
/** @type {number} */
http2.constants.NGHTTP2_PROTOCOL_ERROR;
/** @type {number} */
http2.constants.NGHTTP2_INTERNAL_ERROR;
/** @type {number} */
http2.constants.NGHTTP2_FLOW_CONTROL_ERROR;
/** @type {number} */
http2.constants.NGHTTP2_SETTINGS_TIMEOUT;
/** @type {number} */
http2.constants.NGHTTP2_STREAM_CLOSED;
/** @type {number} */
http2.constants.NGHTTP2_FRAME_SIZE_ERROR;
/** @type {number} */
http2.constants.NGHTTP2_REFUSED_STREAM;
/** @type {number} */
http2.constants.NGHTTP2_CANCEL;
/** @type {number} */
http2.constants.NGHTTP2_COMPRESSION_ERROR;
/** @type {number} */
http2.constants.NGHTTP2_CONNECT_ERROR;
/** @type {number} */
http2.constants.NGHTTP2_ENHANCE_YOUR_CALM;
/** @type {number} */
http2.constants.NGHTTP2_INADEQUATE_SECURITY;
/** @type {number} */
http2.constants.NGHTTP2_HTTP_1_1_REQUIRED;
/** @type {number} */
http2.constants.NGHTTP2_ERR_FRAME_SIZE_ERROR;
/** @type {number} */
http2.constants.NGHTTP2_FLAG_NONE;
/** @type {number} */
http2.constants.NGHTTP2_FLAG_END_STREAM;
/** @type {number} */
http2.constants.NGHTTP2_FLAG_END_HEADERS;
/** @type {number} */
http2.constants.NGHTTP2_FLAG_ACK;
/** @type {number} */
http2.constants.NGHTTP2_FLAG_PADDED;
/** @type {number} */
http2.constants.NGHTTP2_FLAG_PRIORITY;
/** @type {number} */
http2.constants.DEFAULT_SETTINGS_HEADER_TABLE_SIZE;
/** @type {number} */
http2.constants.DEFAULT_SETTINGS_ENABLE_PUSH;
/** @type {number} */
http2.constants.DEFAULT_SETTINGS_INITIAL_WINDOW_SIZE;
/** @type {number} */
http2.constants.DEFAULT_SETTINGS_MAX_FRAME_SIZE;
/** @type {number} */
http2.constants.MAX_MAX_FRAME_SIZE;
/** @type {number} */
http2.constants.MIN_MAX_FRAME_SIZE;
/** @type {number} */
http2.constants.MAX_INITIAL_WINDOW_SIZE;
/** @type {number} */
http2.constants.NGHTTP2_DEFAULT_WEIGHT;
/** @type {number} */
http2.constants.NGHTTP2_SETTINGS_HEADER_TABLE_SIZE;
/** @type {number} */
http2.constants.NGHTTP2_SETTINGS_ENABLE_PUSH;
/** @type {number} */
http2.constants.NGHTTP2_SETTINGS_MAX_CONCURRENT_STREAMS;
/** @type {number} */
http2.constants.NGHTTP2_SETTINGS_INITIAL_WINDOW_SIZE;
/** @type {number} */
http2.constants.NGHTTP2_SETTINGS_MAX_FRAME_SIZE;
/** @type {number} */
http2.constants.NGHTTP2_SETTINGS_MAX_HEADER_LIST_SIZE;
/** @type {number} */
http2.constants.PADDING_STRATEGY_NONE;
/** @type {number} */
http2.constants.PADDING_STRATEGY_MAX;
/** @type {number} */
http2.constants.PADDING_STRATEGY_CALLBACK;
/** @type {string} */
http2.constants.HTTP2_HEADER_STATUS;
/** @type {string} */
http2.constants.HTTP2_HEADER_METHOD;
/** @type {string} */
http2.constants.HTTP2_HEADER_AUTHORITY;
/** @type {string} */
http2.constants.HTTP2_HEADER_SCHEME;
/** @type {string} */
http2.constants.HTTP2_HEADER_PATH;
/** @type {string} */
http2.constants.HTTP2_HEADER_ACCEPT_CHARSET;
/** @type {string} */
http2.constants.HTTP2_HEADER_ACCEPT_ENCODING;
/** @type {string} */
http2.constants.HTTP2_HEADER_ACCEPT_LANGUAGE;
/** @type {string} */
http2.constants.HTTP2_HEADER_ACCEPT_RANGES;
/** @type {string} */
http2.constants.HTTP2_HEADER_ACCEPT;
/** @type {string} */
http2.constants.HTTP2_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN;
/** @type {string} */
http2.constants.HTTP2_HEADER_AGE;
/** @type {string} */
http2.constants.HTTP2_HEADER_ALLOW;
/** @type {string} */
http2.constants.HTTP2_HEADER_AUTHORIZATION;
/** @type {string} */
http2.constants.HTTP2_HEADER_CACHE_CONTROL;
/** @type {string} */
http2.constants.HTTP2_HEADER_CONNECTION;
/** @type {string} */
http2.constants.HTTP2_HEADER_CONTENT_DISPOSITION;
/** @type {string} */
http2.constants.HTTP2_HEADER_CONTENT_ENCODING;
/** @type {string} */
http2.constants.HTTP2_HEADER_CONTENT_LANGUAGE;
/** @type {string} */
http2.constants.HTTP2_HEADER_CONTENT_LENGTH;
/** @type {string} */
http2.constants.HTTP2_HEADER_CONTENT_LOCATION;
/** @type {string} */
http2.constants.HTTP2_HEADER_CONTENT_MD5;
/** @type {string} */
http2.constants.HTTP2_HEADER_CONTENT_RANGE;
/** @type {string} */
http2.constants.HTTP2_HEADER_CONTENT_TYPE;
/** @type {string} */
http2.constants.HTTP2_HEADER_COOKIE;
/** @type {string} */
http2.constants.HTTP2_HEADER_DATE;
/** @type {string} */
http2.constants.HTTP2_HEADER_ETAG;
/** @type {string} */
http2.constants.HTTP2_HEADER_EXPECT;
/** @type {string} */
http2.constants.HTTP2_HEADER_EXPIRES;
/** @type {string} */
http2.constants.HTTP2_HEADER_FROM;
/** @type {string} */
http2.constants.HTTP2_HEADER_HOST;
/** @type {string} */
http2.constants.HTTP2_HEADER_IF_MATCH;
/** @type {string} */
http2.constants.HTTP2_HEADER_IF_MODIFIED_SINCE;
/** @type {string} */
http2.constants.HTTP2_HEADER_IF_NONE_MATCH;
/** @type {string} */
http2.constants.HTTP2_HEADER_IF_RANGE;
/** @type {string} */
http2.constants.HTTP2_HEADER_IF_UNMODIFIED_SINCE;
/** @type {string} */
http2.constants.HTTP2_HEADER_LAST_MODIFIED;
/** @type {string} */
http2.constants.HTTP2_HEADER_LINK;
/** @type {string} */
http2.constants.HTTP2_HEADER_LOCATION;
/** @type {string} */
http2.constants.HTTP2_HEADER_MAX_FORWARDS;
/** @type {string} */
http2.constants.HTTP2_HEADER_PREFER;
/** @type {string} */
http2.constants.HTTP2_HEADER_PROXY_AUTHENTICATE;
/** @type {string} */
http2.constants.HTTP2_HEADER_PROXY_AUTHORIZATION;
/** @type {string} */
http2.constants.HTTP2_HEADER_RANGE;
/** @type {string} */
http2.constants.HTTP2_HEADER_REFERER;
/** @type {string} */
http2.constants.HTTP2_HEADER_REFRESH;
/** @type {string} */
http2.constants.HTTP2_HEADER_RETRY_AFTER;
/** @type {string} */
http2.constants.HTTP2_HEADER_SERVER;
/** @type {string} */
http2.constants.HTTP2_HEADER_SET_COOKIE;
/** @type {string} */
http2.constants.HTTP2_HEADER_STRICT_TRANSPORT_SECURITY;
/** @type {string} */
http2.constants.HTTP2_HEADER_TRANSFER_ENCODING;
/** @type {string} */
http2.constants.HTTP2_HEADER_TE;
/** @type {string} */
http2.constants.HTTP2_HEADER_UPGRADE;
/** @type {string} */
http2.constants.HTTP2_HEADER_USER_AGENT;
/** @type {string} */
http2.constants.HTTP2_HEADER_VARY;
/** @type {string} */
http2.constants.HTTP2_HEADER_VIA;
/** @type {string} */
http2.constants.HTTP2_HEADER_WWW_AUTHENTICATE;
/** @type {string} */
http2.constants.HTTP2_HEADER_HTTP2_SETTINGS;
/** @type {string} */
http2.constants.HTTP2_HEADER_KEEP_ALIVE;
/** @type {string} */
http2.constants.HTTP2_HEADER_PROXY_CONNECTION;
/** @type {string} */
http2.constants.HTTP2_METHOD_ACL;
/** @type {string} */
http2.constants.HTTP2_METHOD_BASELINE_CONTROL;
/** @type {string} */
http2.constants.HTTP2_METHOD_BIND;
/** @type {string} */
http2.constants.HTTP2_METHOD_CHECKIN;
/** @type {string} */
http2.constants.HTTP2_METHOD_CHECKOUT;
/** @type {string} */
http2.constants.HTTP2_METHOD_CONNECT;
/** @type {string} */
http2.constants.HTTP2_METHOD_COPY;
/** @type {string} */
http2.constants.HTTP2_METHOD_DELETE;
/** @type {string} */
http2.constants.HTTP2_METHOD_GET;
/** @type {string} */
http2.constants.HTTP2_METHOD_HEAD;
/** @type {string} */
http2.constants.HTTP2_METHOD_LABEL;
/** @type {string} */
http2.constants.HTTP2_METHOD_LINK;
/** @type {string} */
http2.constants.HTTP2_METHOD_LOCK;
/** @type {string} */
http2.constants.HTTP2_METHOD_MERGE;
/** @type {string} */
http2.constants.HTTP2_METHOD_MKACTIVITY;
/** @type {string} */
http2.constants.HTTP2_METHOD_MKCALENDAR;
/** @type {string} */
http2.constants.HTTP2_METHOD_MKCOL;
/** @type {string} */
http2.constants.HTTP2_METHOD_MKREDIRECTREF;
/** @type {string} */
http2.constants.HTTP2_METHOD_MKWORKSPACE;
/** @type {string} */
http2.constants.HTTP2_METHOD_MOVE;
/** @type {string} */
http2.constants.HTTP2_METHOD_OPTIONS;
/** @type {string} */
http2.constants.HTTP2_METHOD_ORDERPATCH;
/** @type {string} */
http2.constants.HTTP2_METHOD_PATCH;
/** @type {string} */
http2.constants.HTTP2_METHOD_POST;
/** @type {string} */
http2.constants.HTTP2_METHOD_PRI;
/** @type {string} */
http2.constants.HTTP2_METHOD_PROPFIND;
/** @type {string} */
http2.constants.HTTP2_METHOD_PROPPATCH;
/** @type {string} */
http2.constants.HTTP2_METHOD_PUT;
/** @type {string} */
http2.constants.HTTP2_METHOD_REBIND;
/** @type {string} */
http2.constants.HTTP2_METHOD_REPORT;
/** @type {string} */
http2.constants.HTTP2_METHOD_SEARCH;
/** @type {string} */
http2.constants.HTTP2_METHOD_TRACE;
/** @type {string} */
http2.constants.HTTP2_METHOD_UNBIND;
/** @type {string} */
http2.constants.HTTP2_METHOD_UNCHECKOUT;
/** @type {string} */
http2.constants.HTTP2_METHOD_UNLINK;
/** @type {string} */
http2.constants.HTTP2_METHOD_UNLOCK;
/** @type {string} */
http2.constants.HTTP2_METHOD_UPDATE;
/** @type {string} */
http2.constants.HTTP2_METHOD_UPDATEREDIRECTREF;
/** @type {string} */
http2.constants.HTTP2_METHOD_VERSION_CONTROL;
/** @type {number} */
http2.constants.HTTP_STATUS_CONTINUE;
/** @type {number} */
http2.constants.HTTP_STATUS_SWITCHING_PROTOCOLS;
/** @type {number} */
http2.constants.HTTP_STATUS_PROCESSING;
/** @type {number} */
http2.constants.HTTP_STATUS_OK;
/** @type {number} */
http2.constants.HTTP_STATUS_CREATED;
/** @type {number} */
http2.constants.HTTP_STATUS_ACCEPTED;
/** @type {number} */
http2.constants.HTTP_STATUS_NON_AUTHORITATIVE_INFORMATION;
/** @type {number} */
http2.constants.HTTP_STATUS_NO_CONTENT;
/** @type {number} */
http2.constants.HTTP_STATUS_RESET_CONTENT;
/** @type {number} */
http2.constants.HTTP_STATUS_PARTIAL_CONTENT;
/** @type {number} */
http2.constants.HTTP_STATUS_MULTI_STATUS;
/** @type {number} */
http2.constants.HTTP_STATUS_ALREADY_REPORTED;
/** @type {number} */
http2.constants.HTTP_STATUS_IM_USED;
/** @type {number} */
http2.constants.HTTP_STATUS_MULTIPLE_CHOICES;
/** @type {number} */
http2.constants.HTTP_STATUS_MOVED_PERMANENTLY;
/** @type {number} */
http2.constants.HTTP_STATUS_FOUND;
/** @type {number} */
http2.constants.HTTP_STATUS_SEE_OTHER;
/** @type {number} */
http2.constants.HTTP_STATUS_NOT_MODIFIED;
/** @type {number} */
http2.constants.HTTP_STATUS_USE_PROXY;
/** @type {number} */
http2.constants.HTTP_STATUS_TEMPORARY_REDIRECT;
/** @type {number} */
http2.constants.HTTP_STATUS_PERMANENT_REDIRECT;
/** @type {number} */
http2.constants.HTTP_STATUS_BAD_REQUEST;
/** @type {number} */
http2.constants.HTTP_STATUS_UNAUTHORIZED;
/** @type {number} */
http2.constants.HTTP_STATUS_PAYMENT_REQUIRED;
/** @type {number} */
http2.constants.HTTP_STATUS_FORBIDDEN;
/** @type {number} */
http2.constants.HTTP_STATUS_NOT_FOUND;
/** @type {number} */
http2.constants.HTTP_STATUS_METHOD_NOT_ALLOWED;
/** @type {number} */
http2.constants.HTTP_STATUS_NOT_ACCEPTABLE;
/** @type {number} */
http2.constants.HTTP_STATUS_PROXY_AUTHENTICATION_REQUIRED;
/** @type {number} */
http2.constants.HTTP_STATUS_REQUEST_TIMEOUT;
/** @type {number} */
http2.constants.HTTP_STATUS_CONFLICT;
/** @type {number} */
http2.constants.HTTP_STATUS_GONE;
/** @type {number} */
http2.constants.HTTP_STATUS_LENGTH_REQUIRED;
/** @type {number} */
http2.constants.HTTP_STATUS_PRECONDITION_FAILED;
/** @type {number} */
http2.constants.HTTP_STATUS_PAYLOAD_TOO_LARGE;
/** @type {number} */
http2.constants.HTTP_STATUS_URI_TOO_LONG;
/** @type {number} */
http2.constants.HTTP_STATUS_UNSUPPORTED_MEDIA_TYPE;
/** @type {number} */
http2.constants.HTTP_STATUS_RANGE_NOT_SATISFIABLE;
/** @type {number} */
http2.constants.HTTP_STATUS_EXPECTATION_FAILED;
/** @type {number} */
http2.constants.HTTP_STATUS_TEAPOT;
/** @type {number} */
http2.constants.HTTP_STATUS_MISDIRECTED_REQUEST;
/** @type {number} */
http2.constants.HTTP_STATUS_UNPROCESSABLE_ENTITY;
/** @type {number} */
http2.constants.HTTP_STATUS_LOCKED;
/** @type {number} */
http2.constants.HTTP_STATUS_FAILED_DEPENDENCY;
/** @type {number} */
http2.constants.HTTP_STATUS_UNORDERED_COLLECTION;
/** @type {number} */
http2.constants.HTTP_STATUS_UPGRADE_REQUIRED;
/** @type {number} */
http2.constants.HTTP_STATUS_PRECONDITION_REQUIRED;
/** @type {number} */
http2.constants.HTTP_STATUS_TOO_MANY_REQUESTS;
/** @type {number} */
http2.constants.HTTP_STATUS_REQUEST_HEADER_FIELDS_TOO_LARGE;
/** @type {number} */
http2.constants.HTTP_STATUS_UNAVAILABLE_FOR_LEGAL_REASONS;
/** @type {number} */
http2.constants.HTTP_STATUS_INTERNAL_SERVER_ERROR;
/** @type {number} */
http2.constants.HTTP_STATUS_NOT_IMPLEMENTED;
/** @type {number} */
http2.constants.HTTP_STATUS_BAD_GATEWAY;
/** @type {number} */
http2.constants.HTTP_STATUS_SERVICE_UNAVAILABLE;
/** @type {number} */
http2.constants.HTTP_STATUS_GATEWAY_TIMEOUT;
/** @type {number} */
http2.constants.HTTP_STATUS_HTTP_VERSION_NOT_SUPPORTED;
/** @type {number} */
http2.constants.HTTP_STATUS_VARIANT_ALSO_NEGOTIATES;
/** @type {number} */
http2.constants.HTTP_STATUS_INSUFFICIENT_STORAGE;
/** @type {number} */
http2.constants.HTTP_STATUS_LOOP_DETECTED;
/** @type {number} */
http2.constants.HTTP_STATUS_BANDWIDTH_LIMIT_EXCEEDED;
/** @type {number} */
http2.constants.HTTP_STATUS_NOT_EXTENDED;
/** @type {number} */
http2.constants.HTTP_STATUS_NETWORK_AUTHENTICATION_REQUIRED;

/**
 * @return {!http2.Settings}
 */
http2.getDefaultSettings = function() {};

/**
 * @param {!http2.Settings} settings
 * @return {!http2.Settings}
 */
http2.getPackedSettings = function(settings) {};

/**
 * @param {(!Buffer|!Uint8Array)} buf
 * @return {!http2.Settings}
 */
http2.getUnpackedSettings = function(buf) {};

/**
 * @param {function(!http2.Http2ServerRequest, !http2.Http2ServerResponse): void|!http2.ServerOptions=} onRequestHandler_or_options
 * @param {function(!http2.Http2ServerRequest, !http2.Http2ServerResponse): void=} onRequestHandler
 * @return {!http2.Http2Server}
 */
http2.createServer = function(onRequestHandler_or_options, onRequestHandler) {};

/**
 * @param {function(!http2.Http2ServerRequest, !http2.Http2ServerResponse): void|!http2.SecureServerOptions=} onRequestHandler_or_options
 * @param {function(!http2.Http2ServerRequest, !http2.Http2ServerResponse): void=} onRequestHandler
 * @return {!http2.Http2SecureServer}
 */
http2.createSecureServer = function(onRequestHandler_or_options, onRequestHandler) {};

/**
 * @param {(string|!url.URL)} authority
 * @param {function(!http2.ClientHttp2Session, (!net.Socket|!tls.TLSSocket)): void|(!http2.SessionOptions|!http2.SecureClientSessionOptions)=} listener_or_options
 * @param {function(!http2.ClientHttp2Session, (!net.Socket|!tls.TLSSocket)): void=} listener
 * @return {!http2.ClientHttp2Session}
 */
http2.connect = function(authority, listener_or_options, listener) {};
