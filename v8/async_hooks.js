/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from types-v8/async_hooks.d.ts:
// Derived from: declare module "async_hooks"
/** @const */
var async_hooks = {};

/**
 * Returns the asyncId of the current execution context.
 * @return {number}
 */
async_hooks.executionAsyncId = function() {};

/**
 * @return {number}
 */
async_hooks.currentId = function() {};

/**
 * Returns the ID of the resource responsible for calling the callback that is currently being executed.
 * @return {number}
 */
async_hooks.triggerAsyncId = function() {};

/**
 * @return {number}
 */
async_hooks.triggerId = function() {};
/**
 * @record
 * @struct
 */
async_hooks.HookCallbacks = function() {};

/**
 * Called when a class is constructed that has the possibility to emit an asynchronous event.
 * @param {number} asyncId a unique ID for the async resource
 * @param {string} type the type of the async resource
 * @param {number} triggerAsyncId the unique ID of the async resource in whose execution context this async resource was created
 * @param {!Object} resource reference to the resource representing the async operation, needs to be released during destroy
 * @return {void}
 */
async_hooks.HookCallbacks.prototype.init = function(asyncId, type, triggerAsyncId, resource) {};

/**
 * When an asynchronous operation is initiated or completes a callback is called to notify the user.
 * The before callback is called just before said callback is executed.
 * @param {number} asyncId the unique identifier assigned to the resource about to execute the callback.
 * @return {void}
 */
async_hooks.HookCallbacks.prototype.before = function(asyncId) {};

/**
 * Called immediately after the callback specified in before is completed.
 * @param {number} asyncId the unique identifier assigned to the resource which has executed the callback.
 * @return {void}
 */
async_hooks.HookCallbacks.prototype.after = function(asyncId) {};

/**
 * Called when a promise has resolve() called. This may not be in the same execution id
 * as the promise itself.
 * @param {number} asyncId the unique id for the promise that was resolve()d.
 * @return {void}
 */
async_hooks.HookCallbacks.prototype.promiseResolve = function(asyncId) {};

/**
 * Called after the resource corresponding to asyncId is destroyed
 * @param {number} asyncId a unique ID for the async resource
 * @return {void}
 */
async_hooks.HookCallbacks.prototype.destroy = function(asyncId) {};
/**
 * @record
 * @struct
 */
async_hooks.AsyncHook = function() {};

/**
 * Enable the callbacks for a given AsyncHook instance. If no callbacks are provided enabling is a noop.
 * @template THIS
 * @this {THIS}
 * @return {THIS}
 */
async_hooks.AsyncHook.prototype.enable = function() {};

/**
 * Disable the callbacks for a given AsyncHook instance from the global pool of AsyncHook callbacks to be executed. Once a hook has been disabled it will not be called again until enabled.
 * @template THIS
 * @this {THIS}
 * @return {THIS}
 */
async_hooks.AsyncHook.prototype.disable = function() {};

/**
 * Registers functions to be called for different lifetime events of each async operation.
 * @param {!async_hooks.HookCallbacks} options the callbacks to register
 * @return {!async_hooks.AsyncHook} an AsyncHooks instance used for disabling and enabling hooks
 */
async_hooks.createHook = function(options) {};
/**
 * @record
 * @struct
 */
async_hooks.AsyncResourceOptions = function() {};
/** @type {number} */
async_hooks.AsyncResourceOptions.prototype.triggerAsyncId;
/** @type {boolean} */
async_hooks.AsyncResourceOptions.prototype.requireManualDestroy;

/**
 * @constructor
 * @struct
 * AsyncResource() is meant to be extended. Instantiating a
 * new AsyncResource() also triggers init. If triggerAsyncId is omitted then
 * async_hook.executionAsyncId() is used.
 * @param {string} type The type of async event.
 * @param {(number|!async_hooks.AsyncResourceOptions)=} triggerAsyncId The ID of the execution context that created
 *   this async event (default: `executionAsyncId()`), or an
 *   AsyncResourceOptions object (since 8.10)
 */
async_hooks.AsyncResource = function(type, triggerAsyncId) {};

/**
 * Call AsyncHooks before callbacks.
 * @return {void}
 */
async_hooks.AsyncResource.prototype.emitBefore = function() {};

/**
 * Call AsyncHooks after callbacks
 * @return {void}
 */
async_hooks.AsyncResource.prototype.emitAfter = function() {};

/**
 * Call AsyncHooks destroy callbacks.
 * @return {void}
 */
async_hooks.AsyncResource.prototype.emitDestroy = function() {};

/**
 * @return {number} the unique ID assigned to this AsyncResource instance.
 */
async_hooks.AsyncResource.prototype.asyncId = function() {};

/**
 * @return {number} the trigger ID for this AsyncResource instance.
 */
async_hooks.AsyncResource.prototype.triggerAsyncId = function() {};
