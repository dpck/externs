/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from types-v8/util.d.ts:
// Derived from: declare module "util"
/** @const */
var util = {};
/**
 * @extends {NodeJS.InspectOptions}
 * @record
 * @struct
 */
util.InspectOptions = function() {};

/**
 * @param {?} format
 * @param {...?} param
 * @return {string}
 */
util.format = function(format, param) {};

/**
 * @param {string} string
 * @return {void}
 */
util.debug = function(string) {};

/**
 * @param {...?} param
 * @return {void}
 */
util.error = function(param) {};

/**
 * @param {...?} param
 * @return {void}
 */
util.puts = function(param) {};

/**
 * @param {...?} param
 * @return {void}
 */
util.print = function(param) {};

/**
 * @param {string} string
 * @return {void}
 */
util.log = function(string) {};
/** @type {?} */
util.inspect;

/**
 * @param {?} object
 * @return {boolean}
 */
util.isArray = function(object) {};

/**
 * @param {?} object
 * @return {boolean}
 */
util.isRegExp = function(object) {};

/**
 * @param {?} object
 * @return {boolean}
 */
util.isDate = function(object) {};

/**
 * @param {?} object
 * @return {boolean}
 */
util.isError = function(object) {};

/**
 * @param {?} constructor
 * @param {?} superConstructor
 * @return {void}
 */
util.inherits = function(constructor, superConstructor) {};

/**
 * @param {string} key
 * @return {function(string, ...?): void}
 */
util.debuglog = function(key) {};

/**
 * @param {?} object
 * @return {boolean}
 */
util.isBoolean = function(object) {};

/**
 * @param {?} object
 * @return {boolean}
 */
util.isBuffer = function(object) {};

/**
 * @param {?} object
 * @return {boolean}
 */
util.isFunction = function(object) {};

/**
 * @param {?} object
 * @return {boolean}
 */
util.isNull = function(object) {};

/**
 * @param {?} object
 * @return {boolean}
 */
util.isNullOrUndefined = function(object) {};

/**
 * @param {?} object
 * @return {boolean}
 */
util.isNumber = function(object) {};

/**
 * @param {?} object
 * @return {boolean}
 */
util.isObject = function(object) {};

/**
 * @param {?} object
 * @return {boolean}
 */
util.isPrimitive = function(object) {};

/**
 * @param {?} object
 * @return {boolean}
 */
util.isString = function(object) {};

/**
 * @param {?} object
 * @return {boolean}
 */
util.isSymbol = function(object) {};

/**
 * @param {?} object
 * @return {boolean}
 */
util.isUndefined = function(object) {};

/**
 * @template T
 * @param {util.T} fn
 * @param {string} message
 * @return {util.T}
 */
util.deprecate = function(fn, message) {};
/**
 * @template TCustom
 * @record
 * @struct
 */
util.CustomPromisify = function() {};
/** @type {util.TCustom} */
util.CustomPromisify.prototype.__promisify__;

/**
 * @template TResult, T1, T2, T3, T4, T5, T6
 * @param {function(): !Promise<void>|function(): !Promise<util.TResult>|function(util.T1): !Promise<void>|function(util.T1): !Promise<util.TResult>|function(util.T1, util.T2): !Promise<void>|function(util.T1, util.T2): !Promise<util.TResult>|function(util.T1, util.T2, util.T3): !Promise<void>|function(util.T1, util.T2, util.T3): !Promise<util.TResult>|function(util.T1, util.T2, util.T3, util.T4): !Promise<void>|function(util.T1, util.T2, util.T3, util.T4): !Promise<util.TResult>|function(util.T1, util.T2, util.T3, util.T4, util.T5): !Promise<void>|function(util.T1, util.T2, util.T3, util.T4, util.T5): !Promise<util.TResult>|function(util.T1, util.T2, util.T3, util.T4, util.T5, util.T6): !Promise<void>|function(util.T1, util.T2, util.T3, util.T4, util.T5, util.T6): !Promise<util.TResult>} fn
 * @return {function(function(!NodeJS.ErrnoException): void): void|function(function(!NodeJS.ErrnoException, util.TResult): void): void|function(util.T1, function(!NodeJS.ErrnoException): void): void|function(util.T1, function(!NodeJS.ErrnoException, util.TResult): void): void|function(util.T1, util.T2, function(!NodeJS.ErrnoException): void): void|function(util.T1, util.T2, function(!NodeJS.ErrnoException, util.TResult): void): void|function(util.T1, util.T2, util.T3, function(!NodeJS.ErrnoException): void): void|function(util.T1, util.T2, util.T3, function(!NodeJS.ErrnoException, util.TResult): void): void|function(util.T1, util.T2, util.T3, util.T4, function(!NodeJS.ErrnoException): void): void|function(util.T1, util.T2, util.T3, util.T4, function(!NodeJS.ErrnoException, util.TResult): void): void|function(util.T1, util.T2, util.T3, util.T4, util.T5, function(!NodeJS.ErrnoException): void): void|function(util.T1, util.T2, util.T3, util.T4, util.T5, function(!NodeJS.ErrnoException, util.TResult): void): void|function(util.T1, util.T2, util.T3, util.T4, util.T5, util.T6, function(!NodeJS.ErrnoException): void): void|function(util.T1, util.T2, util.T3, util.T4, util.T5, util.T6, function(!NodeJS.ErrnoException, util.TResult): void): void}
 */
util.callbackify = function(fn) {};

/**
 * @template TCustom, TResult, T1, T2, T3, T4, T5
 * @param {!util.CustomPromisify<util.TCustom>|function(function(!Error, util.TResult): void): void|function(function(!Error=): void): void|function(util.T1, function(!Error, util.TResult): void): void|function(util.T1, function(!Error=): void): void|function(util.T1, util.T2, function(!Error, util.TResult): void): void|function(util.T1, util.T2, function(!Error=): void): void|function(util.T1, util.T2, util.T3, function(!Error, util.TResult): void): void|function(util.T1, util.T2, util.T3, function(!Error=): void): void|function(util.T1, util.T2, util.T3, util.T4, function(!Error, util.TResult): void): void|function(util.T1, util.T2, util.T3, util.T4, function(!Error=): void): void|function(util.T1, util.T2, util.T3, util.T4, util.T5, function(!Error, util.TResult): void): void|function(util.T1, util.T2, util.T3, util.T4, util.T5, function(!Error=): void): void|!Function} fn
 * @return {util.TCustom|function(): !Promise<util.TResult>|function(): !Promise<void>|function(util.T1): !Promise<util.TResult>|function(util.T1): !Promise<void>|function(util.T1, util.T2): !Promise<util.TResult>|function(util.T1, util.T2): !Promise<void>|function(util.T1, util.T2, util.T3): !Promise<util.TResult>|function(util.T1, util.T2, util.T3): !Promise<void>|function(util.T1, util.T2, util.T3, util.T4): !Promise<util.TResult>|function(util.T1, util.T2, util.T3, util.T4): !Promise<void>|function(util.T1, util.T2, util.T3, util.T4, util.T5): !Promise<util.TResult>|function(util.T1, util.T2, util.T3, util.T4, util.T5): !Promise<void>|!Function}
 */
util.promisify = function(fn) {};
/** @type {symbol} */
util.promisify.custom;

/**
 * @constructor
 * @struct
 * @param {string=} encoding
 * @param {{fatal: boolean, ignoreBOM: boolean}=} options
 */
util.TextDecoder = function(encoding, options) {};
/** @type {string} */
util.TextDecoder.prototype.encoding;
/** @type {boolean} */
util.TextDecoder.prototype.fatal;
/** @type {boolean} */
util.TextDecoder.prototype.ignoreBOM;

/**
 * @param {(!Int8Array|!Int16Array|!Int32Array|!Uint8Array|!Uint16Array|!Uint32Array|!Uint8ClampedArray|!Float32Array|!Float64Array|!DataView|!ArrayBuffer)=} input
 * @param {{stream: boolean}=} options
 * @return {string}
 */
util.TextDecoder.prototype.decode = function(input, options) {};

/**
 * @constructor
 * @struct
 */
util.TextEncoder = function() {};
/** @type {string} */
util.TextEncoder.prototype.encoding;

/**
 * @param {string=} input
 * @return {!Uint8Array}
 */
util.TextEncoder.prototype.encode = function(input) {};

/**
 * @param {number} err
 * @return {string}
 */
util.getSystemErrorName = function(err) {};
